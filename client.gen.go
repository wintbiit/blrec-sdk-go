// Package blrec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package blrec

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for BarkNotificationSettingsBeganMessageType0.
const (
	BarkNotificationSettingsBeganMessageType0Text BarkNotificationSettingsBeganMessageType0 = "text"
)

// Defines values for BarkNotificationSettingsBeganMessageType1.
const (
	BarkNotificationSettingsBeganMessageType1Markdown BarkNotificationSettingsBeganMessageType1 = "markdown"
)

// Defines values for BarkNotificationSettingsEndedMessageType0.
const (
	BarkNotificationSettingsEndedMessageType0Text BarkNotificationSettingsEndedMessageType0 = "text"
)

// Defines values for BarkNotificationSettingsEndedMessageType1.
const (
	BarkNotificationSettingsEndedMessageType1Markdown BarkNotificationSettingsEndedMessageType1 = "markdown"
)

// Defines values for BarkNotificationSettingsErrorMessageType0.
const (
	BarkNotificationSettingsErrorMessageType0Text BarkNotificationSettingsErrorMessageType0 = "text"
)

// Defines values for BarkNotificationSettingsErrorMessageType1.
const (
	BarkNotificationSettingsErrorMessageType1Markdown BarkNotificationSettingsErrorMessageType1 = "markdown"
)

// Defines values for BarkNotificationSettingsSpaceMessageType0.
const (
	BarkNotificationSettingsSpaceMessageType0Text BarkNotificationSettingsSpaceMessageType0 = "text"
)

// Defines values for BarkNotificationSettingsSpaceMessageType1.
const (
	BarkNotificationSettingsSpaceMessageType1Markdown BarkNotificationSettingsSpaceMessageType1 = "markdown"
)

// Defines values for DataSelection.
const (
	All              DataSelection = "all"
	Injecting        DataSelection = "injecting"
	Living           DataSelection = "living"
	MonitorDisabled  DataSelection = "monitor_disabled"
	MonitorEnabled   DataSelection = "monitor_enabled"
	Preparing        DataSelection = "preparing"
	RecorderDisabled DataSelection = "recorder_disabled"
	RecorderEnabled  DataSelection = "recorder_enabled"
	Recording        DataSelection = "recording"
	Remuxing         DataSelection = "remuxing"
	Rounding         DataSelection = "rounding"
	Stopped          DataSelection = "stopped"
	Waitting         DataSelection = "waitting"
)

// Defines values for EmailNotificationSettingsBeganMessageType0.
const (
	EmailNotificationSettingsBeganMessageType0Text EmailNotificationSettingsBeganMessageType0 = "text"
)

// Defines values for EmailNotificationSettingsBeganMessageType1.
const (
	EmailNotificationSettingsBeganMessageType1Html EmailNotificationSettingsBeganMessageType1 = "html"
)

// Defines values for EmailNotificationSettingsEndedMessageType0.
const (
	EmailNotificationSettingsEndedMessageType0Text EmailNotificationSettingsEndedMessageType0 = "text"
)

// Defines values for EmailNotificationSettingsEndedMessageType1.
const (
	EmailNotificationSettingsEndedMessageType1Html EmailNotificationSettingsEndedMessageType1 = "html"
)

// Defines values for EmailNotificationSettingsErrorMessageType0.
const (
	EmailNotificationSettingsErrorMessageType0Text EmailNotificationSettingsErrorMessageType0 = "text"
)

// Defines values for EmailNotificationSettingsErrorMessageType1.
const (
	EmailNotificationSettingsErrorMessageType1Html EmailNotificationSettingsErrorMessageType1 = "html"
)

// Defines values for EmailNotificationSettingsSpaceMessageType0.
const (
	EmailNotificationSettingsSpaceMessageType0Text EmailNotificationSettingsSpaceMessageType0 = "text"
)

// Defines values for EmailNotificationSettingsSpaceMessageType1.
const (
	EmailNotificationSettingsSpaceMessageType1Html EmailNotificationSettingsSpaceMessageType1 = "html"
)

// Defines values for LoggingSettingsConsoleLogLevel.
const (
	CRITICAL LoggingSettingsConsoleLogLevel = "CRITICAL"
	DEBUG    LoggingSettingsConsoleLogLevel = "DEBUG"
	ERROR    LoggingSettingsConsoleLogLevel = "ERROR"
	INFO     LoggingSettingsConsoleLogLevel = "INFO"
	SUCCESS  LoggingSettingsConsoleLogLevel = "SUCCESS"
	TRACE    LoggingSettingsConsoleLogLevel = "TRACE"
	WARNING  LoggingSettingsConsoleLogLevel = "WARNING"
)

// Defines values for PushdeerNotificationSettingsBeganMessageType0.
const (
	PushdeerNotificationSettingsBeganMessageType0Text PushdeerNotificationSettingsBeganMessageType0 = "text"
)

// Defines values for PushdeerNotificationSettingsBeganMessageType1.
const (
	PushdeerNotificationSettingsBeganMessageType1Markdown PushdeerNotificationSettingsBeganMessageType1 = "markdown"
)

// Defines values for PushdeerNotificationSettingsBeganMessageType2.
const (
	PushdeerNotificationSettingsBeganMessageType2Html PushdeerNotificationSettingsBeganMessageType2 = "html"
)

// Defines values for PushdeerNotificationSettingsEndedMessageType0.
const (
	PushdeerNotificationSettingsEndedMessageType0Text PushdeerNotificationSettingsEndedMessageType0 = "text"
)

// Defines values for PushdeerNotificationSettingsEndedMessageType1.
const (
	PushdeerNotificationSettingsEndedMessageType1Markdown PushdeerNotificationSettingsEndedMessageType1 = "markdown"
)

// Defines values for PushdeerNotificationSettingsEndedMessageType2.
const (
	PushdeerNotificationSettingsEndedMessageType2Html PushdeerNotificationSettingsEndedMessageType2 = "html"
)

// Defines values for PushdeerNotificationSettingsErrorMessageType0.
const (
	PushdeerNotificationSettingsErrorMessageType0Text PushdeerNotificationSettingsErrorMessageType0 = "text"
)

// Defines values for PushdeerNotificationSettingsErrorMessageType1.
const (
	PushdeerNotificationSettingsErrorMessageType1Markdown PushdeerNotificationSettingsErrorMessageType1 = "markdown"
)

// Defines values for PushdeerNotificationSettingsErrorMessageType2.
const (
	PushdeerNotificationSettingsErrorMessageType2Html PushdeerNotificationSettingsErrorMessageType2 = "html"
)

// Defines values for PushdeerNotificationSettingsSpaceMessageType0.
const (
	PushdeerNotificationSettingsSpaceMessageType0Text PushdeerNotificationSettingsSpaceMessageType0 = "text"
)

// Defines values for PushdeerNotificationSettingsSpaceMessageType1.
const (
	PushdeerNotificationSettingsSpaceMessageType1Markdown PushdeerNotificationSettingsSpaceMessageType1 = "markdown"
)

// Defines values for PushdeerNotificationSettingsSpaceMessageType2.
const (
	PushdeerNotificationSettingsSpaceMessageType2Html PushdeerNotificationSettingsSpaceMessageType2 = "html"
)

// Defines values for PushplusNotificationSettingsBeganMessageType0.
const (
	PushplusNotificationSettingsBeganMessageType0Text PushplusNotificationSettingsBeganMessageType0 = "text"
)

// Defines values for PushplusNotificationSettingsBeganMessageType1.
const (
	PushplusNotificationSettingsBeganMessageType1Markdown PushplusNotificationSettingsBeganMessageType1 = "markdown"
)

// Defines values for PushplusNotificationSettingsBeganMessageType2.
const (
	PushplusNotificationSettingsBeganMessageType2Html PushplusNotificationSettingsBeganMessageType2 = "html"
)

// Defines values for PushplusNotificationSettingsEndedMessageType0.
const (
	PushplusNotificationSettingsEndedMessageType0Text PushplusNotificationSettingsEndedMessageType0 = "text"
)

// Defines values for PushplusNotificationSettingsEndedMessageType1.
const (
	PushplusNotificationSettingsEndedMessageType1Markdown PushplusNotificationSettingsEndedMessageType1 = "markdown"
)

// Defines values for PushplusNotificationSettingsEndedMessageType2.
const (
	PushplusNotificationSettingsEndedMessageType2Html PushplusNotificationSettingsEndedMessageType2 = "html"
)

// Defines values for PushplusNotificationSettingsErrorMessageType0.
const (
	PushplusNotificationSettingsErrorMessageType0Text PushplusNotificationSettingsErrorMessageType0 = "text"
)

// Defines values for PushplusNotificationSettingsErrorMessageType1.
const (
	PushplusNotificationSettingsErrorMessageType1Markdown PushplusNotificationSettingsErrorMessageType1 = "markdown"
)

// Defines values for PushplusNotificationSettingsErrorMessageType2.
const (
	PushplusNotificationSettingsErrorMessageType2Html PushplusNotificationSettingsErrorMessageType2 = "html"
)

// Defines values for PushplusNotificationSettingsSpaceMessageType0.
const (
	PushplusNotificationSettingsSpaceMessageType0Text PushplusNotificationSettingsSpaceMessageType0 = "text"
)

// Defines values for PushplusNotificationSettingsSpaceMessageType1.
const (
	PushplusNotificationSettingsSpaceMessageType1Markdown PushplusNotificationSettingsSpaceMessageType1 = "markdown"
)

// Defines values for PushplusNotificationSettingsSpaceMessageType2.
const (
	PushplusNotificationSettingsSpaceMessageType2Html PushplusNotificationSettingsSpaceMessageType2 = "html"
)

// Defines values for RecorderOptionsQualityNumber.
const (
	RecorderOptionsQualityNumberN10000 RecorderOptionsQualityNumber = 10000
	RecorderOptionsQualityNumberN150   RecorderOptionsQualityNumber = 150
	RecorderOptionsQualityNumberN20000 RecorderOptionsQualityNumber = 20000
	RecorderOptionsQualityNumberN250   RecorderOptionsQualityNumber = 250
	RecorderOptionsQualityNumberN400   RecorderOptionsQualityNumber = 400
	RecorderOptionsQualityNumberN401   RecorderOptionsQualityNumber = 401
	RecorderOptionsQualityNumberN80    RecorderOptionsQualityNumber = 80
)

// Defines values for RecorderOptionsRecordingMode.
const (
	RecorderOptionsRecordingModeRaw      RecorderOptionsRecordingMode = "raw"
	RecorderOptionsRecordingModeStandard RecorderOptionsRecordingMode = "standard"
)

// Defines values for RecorderOptionsStreamFormat.
const (
	RecorderOptionsStreamFormatFlv  RecorderOptionsStreamFormat = "flv"
	RecorderOptionsStreamFormatFmp4 RecorderOptionsStreamFormat = "fmp4"
	RecorderOptionsStreamFormatTs   RecorderOptionsStreamFormat = "ts"
)

// Defines values for RecorderSettingsQualityNumber.
const (
	RecorderSettingsQualityNumberN10000 RecorderSettingsQualityNumber = 10000
	RecorderSettingsQualityNumberN150   RecorderSettingsQualityNumber = 150
	RecorderSettingsQualityNumberN20000 RecorderSettingsQualityNumber = 20000
	RecorderSettingsQualityNumberN250   RecorderSettingsQualityNumber = 250
	RecorderSettingsQualityNumberN400   RecorderSettingsQualityNumber = 400
	RecorderSettingsQualityNumberN401   RecorderSettingsQualityNumber = 401
	RecorderSettingsQualityNumberN80    RecorderSettingsQualityNumber = 80
)

// Defines values for RecorderSettingsRecordingMode.
const (
	RecorderSettingsRecordingModeRaw      RecorderSettingsRecordingMode = "raw"
	RecorderSettingsRecordingModeStandard RecorderSettingsRecordingMode = "standard"
)

// Defines values for RecorderSettingsStreamFormat.
const (
	RecorderSettingsStreamFormatFlv  RecorderSettingsStreamFormat = "flv"
	RecorderSettingsStreamFormatFmp4 RecorderSettingsStreamFormat = "fmp4"
	RecorderSettingsStreamFormatTs   RecorderSettingsStreamFormat = "ts"
)

// Defines values for ServerchanNotificationSettingsBeganMessageType.
const (
	ServerchanNotificationSettingsBeganMessageTypeMarkdown ServerchanNotificationSettingsBeganMessageType = "markdown"
)

// Defines values for ServerchanNotificationSettingsEndedMessageType.
const (
	ServerchanNotificationSettingsEndedMessageTypeMarkdown ServerchanNotificationSettingsEndedMessageType = "markdown"
)

// Defines values for ServerchanNotificationSettingsErrorMessageType.
const (
	ServerchanNotificationSettingsErrorMessageTypeMarkdown ServerchanNotificationSettingsErrorMessageType = "markdown"
)

// Defines values for ServerchanNotificationSettingsSpaceMessageType.
const (
	ServerchanNotificationSettingsSpaceMessageTypeMarkdown ServerchanNotificationSettingsSpaceMessageType = "markdown"
)

// Defines values for TelegramNotificationSettingsBeganMessageType0.
const (
	TelegramNotificationSettingsBeganMessageType0Markdown TelegramNotificationSettingsBeganMessageType0 = "markdown"
)

// Defines values for TelegramNotificationSettingsBeganMessageType1.
const (
	TelegramNotificationSettingsBeganMessageType1Html TelegramNotificationSettingsBeganMessageType1 = "html"
)

// Defines values for TelegramNotificationSettingsEndedMessageType0.
const (
	TelegramNotificationSettingsEndedMessageType0Markdown TelegramNotificationSettingsEndedMessageType0 = "markdown"
)

// Defines values for TelegramNotificationSettingsEndedMessageType1.
const (
	TelegramNotificationSettingsEndedMessageType1Html TelegramNotificationSettingsEndedMessageType1 = "html"
)

// Defines values for TelegramNotificationSettingsErrorMessageType0.
const (
	TelegramNotificationSettingsErrorMessageType0Markdown TelegramNotificationSettingsErrorMessageType0 = "markdown"
)

// Defines values for TelegramNotificationSettingsErrorMessageType1.
const (
	TelegramNotificationSettingsErrorMessageType1Html TelegramNotificationSettingsErrorMessageType1 = "html"
)

// Defines values for TelegramNotificationSettingsSpaceMessageType0.
const (
	TelegramNotificationSettingsSpaceMessageType0Markdown TelegramNotificationSettingsSpaceMessageType0 = "markdown"
)

// Defines values for TelegramNotificationSettingsSpaceMessageType1.
const (
	TelegramNotificationSettingsSpaceMessageType1Html TelegramNotificationSettingsSpaceMessageType1 = "html"
)

// Defines values for GetSettingsApiV1SettingsGetParamsInclude.
const (
	GetSettingsApiV1SettingsGetParamsIncludeBarkNotification       GetSettingsApiV1SettingsGetParamsInclude = "barkNotification"
	GetSettingsApiV1SettingsGetParamsIncludeBiliApi                GetSettingsApiV1SettingsGetParamsInclude = "biliApi"
	GetSettingsApiV1SettingsGetParamsIncludeDanmaku                GetSettingsApiV1SettingsGetParamsInclude = "danmaku"
	GetSettingsApiV1SettingsGetParamsIncludeEmailNotification      GetSettingsApiV1SettingsGetParamsInclude = "emailNotification"
	GetSettingsApiV1SettingsGetParamsIncludeHeader                 GetSettingsApiV1SettingsGetParamsInclude = "header"
	GetSettingsApiV1SettingsGetParamsIncludeLogging                GetSettingsApiV1SettingsGetParamsInclude = "logging"
	GetSettingsApiV1SettingsGetParamsIncludeOutput                 GetSettingsApiV1SettingsGetParamsInclude = "output"
	GetSettingsApiV1SettingsGetParamsIncludePostprocessing         GetSettingsApiV1SettingsGetParamsInclude = "postprocessing"
	GetSettingsApiV1SettingsGetParamsIncludePushdeerNotification   GetSettingsApiV1SettingsGetParamsInclude = "pushdeerNotification"
	GetSettingsApiV1SettingsGetParamsIncludePushplusNotification   GetSettingsApiV1SettingsGetParamsInclude = "pushplusNotification"
	GetSettingsApiV1SettingsGetParamsIncludeRecorder               GetSettingsApiV1SettingsGetParamsInclude = "recorder"
	GetSettingsApiV1SettingsGetParamsIncludeServerchanNotification GetSettingsApiV1SettingsGetParamsInclude = "serverchanNotification"
	GetSettingsApiV1SettingsGetParamsIncludeSpace                  GetSettingsApiV1SettingsGetParamsInclude = "space"
	GetSettingsApiV1SettingsGetParamsIncludeTasks                  GetSettingsApiV1SettingsGetParamsInclude = "tasks"
	GetSettingsApiV1SettingsGetParamsIncludeTelegramNotification   GetSettingsApiV1SettingsGetParamsInclude = "telegramNotification"
	GetSettingsApiV1SettingsGetParamsIncludeVersion                GetSettingsApiV1SettingsGetParamsInclude = "version"
	GetSettingsApiV1SettingsGetParamsIncludeWebhooks               GetSettingsApiV1SettingsGetParamsInclude = "webhooks"
)

// Defines values for GetSettingsApiV1SettingsGetParamsExclude.
const (
	GetSettingsApiV1SettingsGetParamsExcludeBarkNotification       GetSettingsApiV1SettingsGetParamsExclude = "barkNotification"
	GetSettingsApiV1SettingsGetParamsExcludeBiliApi                GetSettingsApiV1SettingsGetParamsExclude = "biliApi"
	GetSettingsApiV1SettingsGetParamsExcludeDanmaku                GetSettingsApiV1SettingsGetParamsExclude = "danmaku"
	GetSettingsApiV1SettingsGetParamsExcludeEmailNotification      GetSettingsApiV1SettingsGetParamsExclude = "emailNotification"
	GetSettingsApiV1SettingsGetParamsExcludeHeader                 GetSettingsApiV1SettingsGetParamsExclude = "header"
	GetSettingsApiV1SettingsGetParamsExcludeLogging                GetSettingsApiV1SettingsGetParamsExclude = "logging"
	GetSettingsApiV1SettingsGetParamsExcludeOutput                 GetSettingsApiV1SettingsGetParamsExclude = "output"
	GetSettingsApiV1SettingsGetParamsExcludePostprocessing         GetSettingsApiV1SettingsGetParamsExclude = "postprocessing"
	GetSettingsApiV1SettingsGetParamsExcludePushdeerNotification   GetSettingsApiV1SettingsGetParamsExclude = "pushdeerNotification"
	GetSettingsApiV1SettingsGetParamsExcludePushplusNotification   GetSettingsApiV1SettingsGetParamsExclude = "pushplusNotification"
	GetSettingsApiV1SettingsGetParamsExcludeRecorder               GetSettingsApiV1SettingsGetParamsExclude = "recorder"
	GetSettingsApiV1SettingsGetParamsExcludeServerchanNotification GetSettingsApiV1SettingsGetParamsExclude = "serverchanNotification"
	GetSettingsApiV1SettingsGetParamsExcludeSpace                  GetSettingsApiV1SettingsGetParamsExclude = "space"
	GetSettingsApiV1SettingsGetParamsExcludeTasks                  GetSettingsApiV1SettingsGetParamsExclude = "tasks"
	GetSettingsApiV1SettingsGetParamsExcludeTelegramNotification   GetSettingsApiV1SettingsGetParamsExclude = "telegramNotification"
	GetSettingsApiV1SettingsGetParamsExcludeVersion                GetSettingsApiV1SettingsGetParamsExclude = "version"
	GetSettingsApiV1SettingsGetParamsExcludeWebhooks               GetSettingsApiV1SettingsGetParamsExclude = "webhooks"
)

// BarkNotificationSettings defines model for BarkNotificationSettings.
type BarkNotificationSettings struct {
	BeganMessageContent *string                                    `json:"beganMessageContent,omitempty"`
	BeganMessageTitle   *string                                    `json:"beganMessageTitle,omitempty"`
	BeganMessageType    *BarkNotificationSettings_BeganMessageType `json:"beganMessageType,omitempty"`
	Enabled             *bool                                      `json:"enabled,omitempty"`
	EndedMessageContent *string                                    `json:"endedMessageContent,omitempty"`
	EndedMessageTitle   *string                                    `json:"endedMessageTitle,omitempty"`
	EndedMessageType    *BarkNotificationSettings_EndedMessageType `json:"endedMessageType,omitempty"`
	ErrorMessageContent *string                                    `json:"errorMessageContent,omitempty"`
	ErrorMessageTitle   *string                                    `json:"errorMessageTitle,omitempty"`
	ErrorMessageType    *BarkNotificationSettings_ErrorMessageType `json:"errorMessageType,omitempty"`
	NotifyBegan         *bool                                      `json:"notifyBegan,omitempty"`
	NotifyEnded         *bool                                      `json:"notifyEnded,omitempty"`
	NotifyError         *bool                                      `json:"notifyError,omitempty"`
	NotifySpace         *bool                                      `json:"notifySpace,omitempty"`
	Pushkey             *string                                    `json:"pushkey,omitempty"`
	Server              *string                                    `json:"server,omitempty"`
	SpaceMessageContent *string                                    `json:"spaceMessageContent,omitempty"`
	SpaceMessageTitle   *string                                    `json:"spaceMessageTitle,omitempty"`
	SpaceMessageType    *BarkNotificationSettings_SpaceMessageType `json:"spaceMessageType,omitempty"`
}

// BarkNotificationSettingsBeganMessageType0 defines model for BarkNotificationSettings.BeganMessageType.0.
type BarkNotificationSettingsBeganMessageType0 string

// BarkNotificationSettingsBeganMessageType1 defines model for BarkNotificationSettings.BeganMessageType.1.
type BarkNotificationSettingsBeganMessageType1 string

// BarkNotificationSettings_BeganMessageType defines model for BarkNotificationSettings.BeganMessageType.
type BarkNotificationSettings_BeganMessageType struct {
	union json.RawMessage
}

// BarkNotificationSettingsEndedMessageType0 defines model for BarkNotificationSettings.EndedMessageType.0.
type BarkNotificationSettingsEndedMessageType0 string

// BarkNotificationSettingsEndedMessageType1 defines model for BarkNotificationSettings.EndedMessageType.1.
type BarkNotificationSettingsEndedMessageType1 string

// BarkNotificationSettings_EndedMessageType defines model for BarkNotificationSettings.EndedMessageType.
type BarkNotificationSettings_EndedMessageType struct {
	union json.RawMessage
}

// BarkNotificationSettingsErrorMessageType0 defines model for BarkNotificationSettings.ErrorMessageType.0.
type BarkNotificationSettingsErrorMessageType0 string

// BarkNotificationSettingsErrorMessageType1 defines model for BarkNotificationSettings.ErrorMessageType.1.
type BarkNotificationSettingsErrorMessageType1 string

// BarkNotificationSettings_ErrorMessageType defines model for BarkNotificationSettings.ErrorMessageType.
type BarkNotificationSettings_ErrorMessageType struct {
	union json.RawMessage
}

// BarkNotificationSettingsSpaceMessageType0 defines model for BarkNotificationSettings.SpaceMessageType.0.
type BarkNotificationSettingsSpaceMessageType0 string

// BarkNotificationSettingsSpaceMessageType1 defines model for BarkNotificationSettings.SpaceMessageType.1.
type BarkNotificationSettingsSpaceMessageType1 string

// BarkNotificationSettings_SpaceMessageType defines model for BarkNotificationSettings.SpaceMessageType.
type BarkNotificationSettings_SpaceMessageType struct {
	union json.RawMessage
}

// BiliApiSettings defines model for BiliApiSettings.
type BiliApiSettings struct {
	BaseApiUrls         *[]string `json:"baseApiUrls,omitempty"`
	BaseLiveApiUrls     *[]string `json:"baseLiveApiUrls,omitempty"`
	BasePlayInfoApiUrls *[]string `json:"basePlayInfoApiUrls,omitempty"`
}

// BodyDisableAllTaskRecordersApiV1TasksRecorderDisablePost defines model for Body_disable_all_task_recorders_api_v1_tasks_recorder_disable_post.
type BodyDisableAllTaskRecordersApiV1TasksRecorderDisablePost struct {
	Background *bool `json:"background,omitempty"`
	Force      *bool `json:"force,omitempty"`
}

// BodyDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePost defines model for Body_disable_task_recorder_api_v1_tasks__room_id__recorder_disable_post.
type BodyDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePost struct {
	Background *bool `json:"background,omitempty"`
	Force      *bool `json:"force,omitempty"`
}

// BodyStopAllTasksApiV1TasksStopPost defines model for Body_stop_all_tasks_api_v1_tasks_stop_post.
type BodyStopAllTasksApiV1TasksStopPost struct {
	Background *bool `json:"background,omitempty"`
	Force      *bool `json:"force,omitempty"`
}

// BodyStopTaskApiV1TasksRoomIdStopPost defines model for Body_stop_task_api_v1_tasks__room_id__stop_post.
type BodyStopTaskApiV1TasksRoomIdStopPost struct {
	Background *bool `json:"background,omitempty"`
	Force      *bool `json:"force,omitempty"`
}

// BodyValidateCookieApiV1ValidationCookiePost defines model for Body_validate_cookie_api_v1_validation_cookie_post.
type BodyValidateCookieApiV1ValidationCookiePost struct {
	Cookie string `json:"cookie"`
}

// BodyValidateDirApiV1ValidationDirPost defines model for Body_validate_dir_api_v1_validation_dir_post.
type BodyValidateDirApiV1ValidationDirPost struct {
	Path string `json:"path"`
}

// CoverSaveStrategy An enumeration.
type CoverSaveStrategy = interface{}

// DanmakuOptions defines model for DanmakuOptions.
type DanmakuOptions struct {
	DanmuUname      *bool `json:"danmuUname,omitempty"`
	RecordFreeGifts *bool `json:"recordFreeGifts,omitempty"`
	RecordGiftSend  *bool `json:"recordGiftSend,omitempty"`
	RecordGuardBuy  *bool `json:"recordGuardBuy,omitempty"`
	RecordSuperChat *bool `json:"recordSuperChat,omitempty"`
	SaveRawDanmaku  *bool `json:"saveRawDanmaku,omitempty"`
}

// DanmakuSettings defines model for DanmakuSettings.
type DanmakuSettings struct {
	DanmuUname      *bool `json:"danmuUname,omitempty"`
	RecordFreeGifts *bool `json:"recordFreeGifts,omitempty"`
	RecordGiftSend  *bool `json:"recordGiftSend,omitempty"`
	RecordGuardBuy  *bool `json:"recordGuardBuy,omitempty"`
	RecordSuperChat *bool `json:"recordSuperChat,omitempty"`
	SaveRawDanmaku  *bool `json:"saveRawDanmaku,omitempty"`
}

// DataSelection An enumeration.
type DataSelection string

// DeleteStrategy An enumeration.
type DeleteStrategy = interface{}

// EmailNotificationSettings defines model for EmailNotificationSettings.
type EmailNotificationSettings struct {
	AuthCode            *string                                     `json:"authCode,omitempty"`
	BeganMessageContent *string                                     `json:"beganMessageContent,omitempty"`
	BeganMessageTitle   *string                                     `json:"beganMessageTitle,omitempty"`
	BeganMessageType    *EmailNotificationSettings_BeganMessageType `json:"beganMessageType,omitempty"`
	DstAddr             *string                                     `json:"dstAddr,omitempty"`
	Enabled             *bool                                       `json:"enabled,omitempty"`
	EndedMessageContent *string                                     `json:"endedMessageContent,omitempty"`
	EndedMessageTitle   *string                                     `json:"endedMessageTitle,omitempty"`
	EndedMessageType    *EmailNotificationSettings_EndedMessageType `json:"endedMessageType,omitempty"`
	ErrorMessageContent *string                                     `json:"errorMessageContent,omitempty"`
	ErrorMessageTitle   *string                                     `json:"errorMessageTitle,omitempty"`
	ErrorMessageType    *EmailNotificationSettings_ErrorMessageType `json:"errorMessageType,omitempty"`
	NotifyBegan         *bool                                       `json:"notifyBegan,omitempty"`
	NotifyEnded         *bool                                       `json:"notifyEnded,omitempty"`
	NotifyError         *bool                                       `json:"notifyError,omitempty"`
	NotifySpace         *bool                                       `json:"notifySpace,omitempty"`
	SmtpHost            *string                                     `json:"smtpHost,omitempty"`
	SmtpPort            *int                                        `json:"smtpPort,omitempty"`
	SpaceMessageContent *string                                     `json:"spaceMessageContent,omitempty"`
	SpaceMessageTitle   *string                                     `json:"spaceMessageTitle,omitempty"`
	SpaceMessageType    *EmailNotificationSettings_SpaceMessageType `json:"spaceMessageType,omitempty"`
	SrcAddr             *string                                     `json:"srcAddr,omitempty"`
}

// EmailNotificationSettingsBeganMessageType0 defines model for EmailNotificationSettings.BeganMessageType.0.
type EmailNotificationSettingsBeganMessageType0 string

// EmailNotificationSettingsBeganMessageType1 defines model for EmailNotificationSettings.BeganMessageType.1.
type EmailNotificationSettingsBeganMessageType1 string

// EmailNotificationSettings_BeganMessageType defines model for EmailNotificationSettings.BeganMessageType.
type EmailNotificationSettings_BeganMessageType struct {
	union json.RawMessage
}

// EmailNotificationSettingsEndedMessageType0 defines model for EmailNotificationSettings.EndedMessageType.0.
type EmailNotificationSettingsEndedMessageType0 string

// EmailNotificationSettingsEndedMessageType1 defines model for EmailNotificationSettings.EndedMessageType.1.
type EmailNotificationSettingsEndedMessageType1 string

// EmailNotificationSettings_EndedMessageType defines model for EmailNotificationSettings.EndedMessageType.
type EmailNotificationSettings_EndedMessageType struct {
	union json.RawMessage
}

// EmailNotificationSettingsErrorMessageType0 defines model for EmailNotificationSettings.ErrorMessageType.0.
type EmailNotificationSettingsErrorMessageType0 string

// EmailNotificationSettingsErrorMessageType1 defines model for EmailNotificationSettings.ErrorMessageType.1.
type EmailNotificationSettingsErrorMessageType1 string

// EmailNotificationSettings_ErrorMessageType defines model for EmailNotificationSettings.ErrorMessageType.
type EmailNotificationSettings_ErrorMessageType struct {
	union json.RawMessage
}

// EmailNotificationSettingsSpaceMessageType0 defines model for EmailNotificationSettings.SpaceMessageType.0.
type EmailNotificationSettingsSpaceMessageType0 string

// EmailNotificationSettingsSpaceMessageType1 defines model for EmailNotificationSettings.SpaceMessageType.1.
type EmailNotificationSettingsSpaceMessageType1 string

// EmailNotificationSettings_SpaceMessageType defines model for EmailNotificationSettings.SpaceMessageType.
type EmailNotificationSettings_SpaceMessageType struct {
	union json.RawMessage
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// HeaderOptions defines model for HeaderOptions.
type HeaderOptions struct {
	Cookie    *string `json:"cookie,omitempty"`
	UserAgent *string `json:"userAgent,omitempty"`
}

// HeaderSettings defines model for HeaderSettings.
type HeaderSettings struct {
	Cookie    *string `json:"cookie,omitempty"`
	UserAgent *string `json:"userAgent,omitempty"`
}

// LoggingSettings defines model for LoggingSettings.
type LoggingSettings struct {
	BackupCount     *int                            `json:"backupCount,omitempty"`
	ConsoleLogLevel *LoggingSettingsConsoleLogLevel `json:"consoleLogLevel,omitempty"`
	LogDir          *string                         `json:"logDir,omitempty"`
}

// LoggingSettingsConsoleLogLevel defines model for LoggingSettings.ConsoleLogLevel.
type LoggingSettingsConsoleLogLevel string

// OutputOptions defines model for OutputOptions.
type OutputOptions struct {
	DurationLimit *int    `json:"durationLimit,omitempty"`
	FilesizeLimit *int    `json:"filesizeLimit,omitempty"`
	PathTemplate  *string `json:"pathTemplate,omitempty"`
}

// OutputSettings defines model for OutputSettings.
type OutputSettings struct {
	DurationLimit *int    `json:"durationLimit,omitempty"`
	FilesizeLimit *int    `json:"filesizeLimit,omitempty"`
	OutDir        *string `json:"outDir,omitempty"`
	PathTemplate  *string `json:"pathTemplate,omitempty"`
}

// PostprocessingOptions defines model for PostprocessingOptions.
type PostprocessingOptions struct {
	// DeleteSource An enumeration.
	DeleteSource        *DeleteStrategy `json:"deleteSource,omitempty"`
	InjectExtraMetadata *bool           `json:"injectExtraMetadata,omitempty"`
	RemuxToMp4          *bool           `json:"remuxToMp4,omitempty"`
}

// PostprocessingSettings defines model for PostprocessingSettings.
type PostprocessingSettings struct {
	DeleteSource        *DeleteStrategy `json:"deleteSource,omitempty"`
	InjectExtraMetadata *bool           `json:"injectExtraMetadata,omitempty"`
	RemuxToMp4          *bool           `json:"remuxToMp4,omitempty"`
}

// PushdeerNotificationSettings defines model for PushdeerNotificationSettings.
type PushdeerNotificationSettings struct {
	BeganMessageContent *string                                        `json:"beganMessageContent,omitempty"`
	BeganMessageTitle   *string                                        `json:"beganMessageTitle,omitempty"`
	BeganMessageType    *PushdeerNotificationSettings_BeganMessageType `json:"beganMessageType,omitempty"`
	Enabled             *bool                                          `json:"enabled,omitempty"`
	EndedMessageContent *string                                        `json:"endedMessageContent,omitempty"`
	EndedMessageTitle   *string                                        `json:"endedMessageTitle,omitempty"`
	EndedMessageType    *PushdeerNotificationSettings_EndedMessageType `json:"endedMessageType,omitempty"`
	ErrorMessageContent *string                                        `json:"errorMessageContent,omitempty"`
	ErrorMessageTitle   *string                                        `json:"errorMessageTitle,omitempty"`
	ErrorMessageType    *PushdeerNotificationSettings_ErrorMessageType `json:"errorMessageType,omitempty"`
	NotifyBegan         *bool                                          `json:"notifyBegan,omitempty"`
	NotifyEnded         *bool                                          `json:"notifyEnded,omitempty"`
	NotifyError         *bool                                          `json:"notifyError,omitempty"`
	NotifySpace         *bool                                          `json:"notifySpace,omitempty"`
	Pushkey             *string                                        `json:"pushkey,omitempty"`
	Server              *string                                        `json:"server,omitempty"`
	SpaceMessageContent *string                                        `json:"spaceMessageContent,omitempty"`
	SpaceMessageTitle   *string                                        `json:"spaceMessageTitle,omitempty"`
	SpaceMessageType    *PushdeerNotificationSettings_SpaceMessageType `json:"spaceMessageType,omitempty"`
}

// PushdeerNotificationSettingsBeganMessageType0 defines model for PushdeerNotificationSettings.BeganMessageType.0.
type PushdeerNotificationSettingsBeganMessageType0 string

// PushdeerNotificationSettingsBeganMessageType1 defines model for PushdeerNotificationSettings.BeganMessageType.1.
type PushdeerNotificationSettingsBeganMessageType1 string

// PushdeerNotificationSettingsBeganMessageType2 defines model for PushdeerNotificationSettings.BeganMessageType.2.
type PushdeerNotificationSettingsBeganMessageType2 string

// PushdeerNotificationSettings_BeganMessageType defines model for PushdeerNotificationSettings.BeganMessageType.
type PushdeerNotificationSettings_BeganMessageType struct {
	union json.RawMessage
}

// PushdeerNotificationSettingsEndedMessageType0 defines model for PushdeerNotificationSettings.EndedMessageType.0.
type PushdeerNotificationSettingsEndedMessageType0 string

// PushdeerNotificationSettingsEndedMessageType1 defines model for PushdeerNotificationSettings.EndedMessageType.1.
type PushdeerNotificationSettingsEndedMessageType1 string

// PushdeerNotificationSettingsEndedMessageType2 defines model for PushdeerNotificationSettings.EndedMessageType.2.
type PushdeerNotificationSettingsEndedMessageType2 string

// PushdeerNotificationSettings_EndedMessageType defines model for PushdeerNotificationSettings.EndedMessageType.
type PushdeerNotificationSettings_EndedMessageType struct {
	union json.RawMessage
}

// PushdeerNotificationSettingsErrorMessageType0 defines model for PushdeerNotificationSettings.ErrorMessageType.0.
type PushdeerNotificationSettingsErrorMessageType0 string

// PushdeerNotificationSettingsErrorMessageType1 defines model for PushdeerNotificationSettings.ErrorMessageType.1.
type PushdeerNotificationSettingsErrorMessageType1 string

// PushdeerNotificationSettingsErrorMessageType2 defines model for PushdeerNotificationSettings.ErrorMessageType.2.
type PushdeerNotificationSettingsErrorMessageType2 string

// PushdeerNotificationSettings_ErrorMessageType defines model for PushdeerNotificationSettings.ErrorMessageType.
type PushdeerNotificationSettings_ErrorMessageType struct {
	union json.RawMessage
}

// PushdeerNotificationSettingsSpaceMessageType0 defines model for PushdeerNotificationSettings.SpaceMessageType.0.
type PushdeerNotificationSettingsSpaceMessageType0 string

// PushdeerNotificationSettingsSpaceMessageType1 defines model for PushdeerNotificationSettings.SpaceMessageType.1.
type PushdeerNotificationSettingsSpaceMessageType1 string

// PushdeerNotificationSettingsSpaceMessageType2 defines model for PushdeerNotificationSettings.SpaceMessageType.2.
type PushdeerNotificationSettingsSpaceMessageType2 string

// PushdeerNotificationSettings_SpaceMessageType defines model for PushdeerNotificationSettings.SpaceMessageType.
type PushdeerNotificationSettings_SpaceMessageType struct {
	union json.RawMessage
}

// PushplusNotificationSettings defines model for PushplusNotificationSettings.
type PushplusNotificationSettings struct {
	BeganMessageContent *string                                        `json:"beganMessageContent,omitempty"`
	BeganMessageTitle   *string                                        `json:"beganMessageTitle,omitempty"`
	BeganMessageType    *PushplusNotificationSettings_BeganMessageType `json:"beganMessageType,omitempty"`
	Enabled             *bool                                          `json:"enabled,omitempty"`
	EndedMessageContent *string                                        `json:"endedMessageContent,omitempty"`
	EndedMessageTitle   *string                                        `json:"endedMessageTitle,omitempty"`
	EndedMessageType    *PushplusNotificationSettings_EndedMessageType `json:"endedMessageType,omitempty"`
	ErrorMessageContent *string                                        `json:"errorMessageContent,omitempty"`
	ErrorMessageTitle   *string                                        `json:"errorMessageTitle,omitempty"`
	ErrorMessageType    *PushplusNotificationSettings_ErrorMessageType `json:"errorMessageType,omitempty"`
	NotifyBegan         *bool                                          `json:"notifyBegan,omitempty"`
	NotifyEnded         *bool                                          `json:"notifyEnded,omitempty"`
	NotifyError         *bool                                          `json:"notifyError,omitempty"`
	NotifySpace         *bool                                          `json:"notifySpace,omitempty"`
	SpaceMessageContent *string                                        `json:"spaceMessageContent,omitempty"`
	SpaceMessageTitle   *string                                        `json:"spaceMessageTitle,omitempty"`
	SpaceMessageType    *PushplusNotificationSettings_SpaceMessageType `json:"spaceMessageType,omitempty"`
	Token               *string                                        `json:"token,omitempty"`
	Topic               *string                                        `json:"topic,omitempty"`
}

// PushplusNotificationSettingsBeganMessageType0 defines model for PushplusNotificationSettings.BeganMessageType.0.
type PushplusNotificationSettingsBeganMessageType0 string

// PushplusNotificationSettingsBeganMessageType1 defines model for PushplusNotificationSettings.BeganMessageType.1.
type PushplusNotificationSettingsBeganMessageType1 string

// PushplusNotificationSettingsBeganMessageType2 defines model for PushplusNotificationSettings.BeganMessageType.2.
type PushplusNotificationSettingsBeganMessageType2 string

// PushplusNotificationSettings_BeganMessageType defines model for PushplusNotificationSettings.BeganMessageType.
type PushplusNotificationSettings_BeganMessageType struct {
	union json.RawMessage
}

// PushplusNotificationSettingsEndedMessageType0 defines model for PushplusNotificationSettings.EndedMessageType.0.
type PushplusNotificationSettingsEndedMessageType0 string

// PushplusNotificationSettingsEndedMessageType1 defines model for PushplusNotificationSettings.EndedMessageType.1.
type PushplusNotificationSettingsEndedMessageType1 string

// PushplusNotificationSettingsEndedMessageType2 defines model for PushplusNotificationSettings.EndedMessageType.2.
type PushplusNotificationSettingsEndedMessageType2 string

// PushplusNotificationSettings_EndedMessageType defines model for PushplusNotificationSettings.EndedMessageType.
type PushplusNotificationSettings_EndedMessageType struct {
	union json.RawMessage
}

// PushplusNotificationSettingsErrorMessageType0 defines model for PushplusNotificationSettings.ErrorMessageType.0.
type PushplusNotificationSettingsErrorMessageType0 string

// PushplusNotificationSettingsErrorMessageType1 defines model for PushplusNotificationSettings.ErrorMessageType.1.
type PushplusNotificationSettingsErrorMessageType1 string

// PushplusNotificationSettingsErrorMessageType2 defines model for PushplusNotificationSettings.ErrorMessageType.2.
type PushplusNotificationSettingsErrorMessageType2 string

// PushplusNotificationSettings_ErrorMessageType defines model for PushplusNotificationSettings.ErrorMessageType.
type PushplusNotificationSettings_ErrorMessageType struct {
	union json.RawMessage
}

// PushplusNotificationSettingsSpaceMessageType0 defines model for PushplusNotificationSettings.SpaceMessageType.0.
type PushplusNotificationSettingsSpaceMessageType0 string

// PushplusNotificationSettingsSpaceMessageType1 defines model for PushplusNotificationSettings.SpaceMessageType.1.
type PushplusNotificationSettingsSpaceMessageType1 string

// PushplusNotificationSettingsSpaceMessageType2 defines model for PushplusNotificationSettings.SpaceMessageType.2.
type PushplusNotificationSettingsSpaceMessageType2 string

// PushplusNotificationSettings_SpaceMessageType defines model for PushplusNotificationSettings.SpaceMessageType.
type PushplusNotificationSettings_SpaceMessageType struct {
	union json.RawMessage
}

// RecorderOptions defines model for RecorderOptions.
type RecorderOptions struct {
	BufferSize *int `json:"bufferSize,omitempty"`

	// CoverSaveStrategy An enumeration.
	CoverSaveStrategy    *CoverSaveStrategy            `json:"coverSaveStrategy,omitempty"`
	DisconnectionTimeout *int                          `json:"disconnectionTimeout,omitempty"`
	Fmp4StreamTimeout    *int                          `json:"fmp4StreamTimeout,omitempty"`
	QualityNumber        *RecorderOptionsQualityNumber `json:"qualityNumber,omitempty"`
	ReadTimeout          *int                          `json:"readTimeout,omitempty"`
	RecordingMode        *RecorderOptionsRecordingMode `json:"recordingMode,omitempty"`
	SaveCover            *bool                         `json:"saveCover,omitempty"`
	StreamFormat         *RecorderOptionsStreamFormat  `json:"streamFormat,omitempty"`
}

// RecorderOptionsQualityNumber defines model for RecorderOptions.QualityNumber.
type RecorderOptionsQualityNumber int

// RecorderOptionsRecordingMode defines model for RecorderOptions.RecordingMode.
type RecorderOptionsRecordingMode string

// RecorderOptionsStreamFormat defines model for RecorderOptions.StreamFormat.
type RecorderOptionsStreamFormat string

// RecorderSettings defines model for RecorderSettings.
type RecorderSettings struct {
	BufferSize           *int                           `json:"bufferSize,omitempty"`
	CoverSaveStrategy    *CoverSaveStrategy             `json:"coverSaveStrategy,omitempty"`
	DisconnectionTimeout *int                           `json:"disconnectionTimeout,omitempty"`
	Fmp4StreamTimeout    *int                           `json:"fmp4StreamTimeout,omitempty"`
	QualityNumber        *RecorderSettingsQualityNumber `json:"qualityNumber,omitempty"`
	ReadTimeout          *int                           `json:"readTimeout,omitempty"`
	RecordingMode        *RecorderSettingsRecordingMode `json:"recordingMode,omitempty"`
	SaveCover            *bool                          `json:"saveCover,omitempty"`
	StreamFormat         *RecorderSettingsStreamFormat  `json:"streamFormat,omitempty"`
}

// RecorderSettingsQualityNumber defines model for RecorderSettings.QualityNumber.
type RecorderSettingsQualityNumber int

// RecorderSettingsRecordingMode defines model for RecorderSettings.RecordingMode.
type RecorderSettingsRecordingMode string

// RecorderSettingsStreamFormat defines model for RecorderSettings.StreamFormat.
type RecorderSettingsStreamFormat string

// ResponseMessage defines model for ResponseMessage.
type ResponseMessage struct {
	Code    *int                    `json:"code,omitempty"`
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
}

// ServerchanNotificationSettings defines model for ServerchanNotificationSettings.
type ServerchanNotificationSettings struct {
	BeganMessageContent *string                                         `json:"beganMessageContent,omitempty"`
	BeganMessageTitle   *string                                         `json:"beganMessageTitle,omitempty"`
	BeganMessageType    *ServerchanNotificationSettingsBeganMessageType `json:"beganMessageType,omitempty"`
	Enabled             *bool                                           `json:"enabled,omitempty"`
	EndedMessageContent *string                                         `json:"endedMessageContent,omitempty"`
	EndedMessageTitle   *string                                         `json:"endedMessageTitle,omitempty"`
	EndedMessageType    *ServerchanNotificationSettingsEndedMessageType `json:"endedMessageType,omitempty"`
	ErrorMessageContent *string                                         `json:"errorMessageContent,omitempty"`
	ErrorMessageTitle   *string                                         `json:"errorMessageTitle,omitempty"`
	ErrorMessageType    *ServerchanNotificationSettingsErrorMessageType `json:"errorMessageType,omitempty"`
	NotifyBegan         *bool                                           `json:"notifyBegan,omitempty"`
	NotifyEnded         *bool                                           `json:"notifyEnded,omitempty"`
	NotifyError         *bool                                           `json:"notifyError,omitempty"`
	NotifySpace         *bool                                           `json:"notifySpace,omitempty"`
	Sendkey             *string                                         `json:"sendkey,omitempty"`
	SpaceMessageContent *string                                         `json:"spaceMessageContent,omitempty"`
	SpaceMessageTitle   *string                                         `json:"spaceMessageTitle,omitempty"`
	SpaceMessageType    *ServerchanNotificationSettingsSpaceMessageType `json:"spaceMessageType,omitempty"`
}

// ServerchanNotificationSettingsBeganMessageType defines model for ServerchanNotificationSettings.BeganMessageType.
type ServerchanNotificationSettingsBeganMessageType string

// ServerchanNotificationSettingsEndedMessageType defines model for ServerchanNotificationSettings.EndedMessageType.
type ServerchanNotificationSettingsEndedMessageType string

// ServerchanNotificationSettingsErrorMessageType defines model for ServerchanNotificationSettings.ErrorMessageType.
type ServerchanNotificationSettingsErrorMessageType string

// ServerchanNotificationSettingsSpaceMessageType defines model for ServerchanNotificationSettings.SpaceMessageType.
type ServerchanNotificationSettingsSpaceMessageType string

// SettingsIn defines model for SettingsIn.
type SettingsIn struct {
	BarkNotification       *BarkNotificationSettings       `json:"barkNotification,omitempty"`
	BiliApi                *BiliApiSettings                `json:"biliApi,omitempty"`
	Danmaku                *DanmakuSettings                `json:"danmaku,omitempty"`
	EmailNotification      *EmailNotificationSettings      `json:"emailNotification,omitempty"`
	Header                 *HeaderSettings                 `json:"header,omitempty"`
	Logging                *LoggingSettings                `json:"logging,omitempty"`
	Output                 *OutputSettings                 `json:"output,omitempty"`
	Postprocessing         *PostprocessingSettings         `json:"postprocessing,omitempty"`
	PushdeerNotification   *PushdeerNotificationSettings   `json:"pushdeerNotification,omitempty"`
	PushplusNotification   *PushplusNotificationSettings   `json:"pushplusNotification,omitempty"`
	Recorder               *RecorderSettings               `json:"recorder,omitempty"`
	ServerchanNotification *ServerchanNotificationSettings `json:"serverchanNotification,omitempty"`
	Space                  *SpaceSettings                  `json:"space,omitempty"`
	TelegramNotification   *TelegramNotificationSettings   `json:"telegramNotification,omitempty"`
	Webhooks               *[]WebHookSettings              `json:"webhooks,omitempty"`
}

// SettingsOut defines model for SettingsOut.
type SettingsOut struct {
	BarkNotification       *BarkNotificationSettings       `json:"barkNotification,omitempty"`
	BiliApi                *BiliApiSettings                `json:"biliApi,omitempty"`
	Danmaku                *DanmakuSettings                `json:"danmaku,omitempty"`
	EmailNotification      *EmailNotificationSettings      `json:"emailNotification,omitempty"`
	Header                 *HeaderSettings                 `json:"header,omitempty"`
	Logging                *LoggingSettings                `json:"logging,omitempty"`
	Output                 *OutputSettings                 `json:"output,omitempty"`
	Postprocessing         *PostprocessingSettings         `json:"postprocessing,omitempty"`
	PushdeerNotification   *PushdeerNotificationSettings   `json:"pushdeerNotification,omitempty"`
	PushplusNotification   *PushplusNotificationSettings   `json:"pushplusNotification,omitempty"`
	Recorder               *RecorderSettings               `json:"recorder,omitempty"`
	ServerchanNotification *ServerchanNotificationSettings `json:"serverchanNotification,omitempty"`
	Space                  *SpaceSettings                  `json:"space,omitempty"`
	Tasks                  *[]TaskSettings                 `json:"tasks,omitempty"`
	TelegramNotification   *TelegramNotificationSettings   `json:"telegramNotification,omitempty"`
	Version                *string                         `json:"version,omitempty"`
	Webhooks               *[]WebHookSettings              `json:"webhooks,omitempty"`
}

// SpaceSettings defines model for SpaceSettings.
type SpaceSettings struct {
	CheckInterval  *int  `json:"checkInterval,omitempty"`
	RecycleRecords *bool `json:"recycleRecords,omitempty"`
	SpaceThreshold *int  `json:"spaceThreshold,omitempty"`
}

// TaskOptions defines model for TaskOptions.
type TaskOptions struct {
	Danmaku        *DanmakuOptions        `json:"danmaku,omitempty"`
	Header         *HeaderOptions         `json:"header,omitempty"`
	Output         *OutputOptions         `json:"output,omitempty"`
	Postprocessing *PostprocessingOptions `json:"postprocessing,omitempty"`
	Recorder       *RecorderOptions       `json:"recorder,omitempty"`
}

// TaskSettings defines model for TaskSettings.
type TaskSettings struct {
	Danmaku        *DanmakuOptions        `json:"danmaku,omitempty"`
	EnableMonitor  *bool                  `json:"enableMonitor,omitempty"`
	EnableRecorder *bool                  `json:"enableRecorder,omitempty"`
	Header         *HeaderOptions         `json:"header,omitempty"`
	Output         *OutputOptions         `json:"output,omitempty"`
	Postprocessing *PostprocessingOptions `json:"postprocessing,omitempty"`
	Recorder       *RecorderOptions       `json:"recorder,omitempty"`
	RoomId         int                    `json:"roomId"`
}

// TelegramNotificationSettings defines model for TelegramNotificationSettings.
type TelegramNotificationSettings struct {
	BeganMessageContent *string                                        `json:"beganMessageContent,omitempty"`
	BeganMessageTitle   *string                                        `json:"beganMessageTitle,omitempty"`
	BeganMessageType    *TelegramNotificationSettings_BeganMessageType `json:"beganMessageType,omitempty"`
	Chatid              *string                                        `json:"chatid,omitempty"`
	Enabled             *bool                                          `json:"enabled,omitempty"`
	EndedMessageContent *string                                        `json:"endedMessageContent,omitempty"`
	EndedMessageTitle   *string                                        `json:"endedMessageTitle,omitempty"`
	EndedMessageType    *TelegramNotificationSettings_EndedMessageType `json:"endedMessageType,omitempty"`
	ErrorMessageContent *string                                        `json:"errorMessageContent,omitempty"`
	ErrorMessageTitle   *string                                        `json:"errorMessageTitle,omitempty"`
	ErrorMessageType    *TelegramNotificationSettings_ErrorMessageType `json:"errorMessageType,omitempty"`
	NotifyBegan         *bool                                          `json:"notifyBegan,omitempty"`
	NotifyEnded         *bool                                          `json:"notifyEnded,omitempty"`
	NotifyError         *bool                                          `json:"notifyError,omitempty"`
	NotifySpace         *bool                                          `json:"notifySpace,omitempty"`
	Server              *string                                        `json:"server,omitempty"`
	SpaceMessageContent *string                                        `json:"spaceMessageContent,omitempty"`
	SpaceMessageTitle   *string                                        `json:"spaceMessageTitle,omitempty"`
	SpaceMessageType    *TelegramNotificationSettings_SpaceMessageType `json:"spaceMessageType,omitempty"`
	Token               *string                                        `json:"token,omitempty"`
}

// TelegramNotificationSettingsBeganMessageType0 defines model for TelegramNotificationSettings.BeganMessageType.0.
type TelegramNotificationSettingsBeganMessageType0 string

// TelegramNotificationSettingsBeganMessageType1 defines model for TelegramNotificationSettings.BeganMessageType.1.
type TelegramNotificationSettingsBeganMessageType1 string

// TelegramNotificationSettings_BeganMessageType defines model for TelegramNotificationSettings.BeganMessageType.
type TelegramNotificationSettings_BeganMessageType struct {
	union json.RawMessage
}

// TelegramNotificationSettingsEndedMessageType0 defines model for TelegramNotificationSettings.EndedMessageType.0.
type TelegramNotificationSettingsEndedMessageType0 string

// TelegramNotificationSettingsEndedMessageType1 defines model for TelegramNotificationSettings.EndedMessageType.1.
type TelegramNotificationSettingsEndedMessageType1 string

// TelegramNotificationSettings_EndedMessageType defines model for TelegramNotificationSettings.EndedMessageType.
type TelegramNotificationSettings_EndedMessageType struct {
	union json.RawMessage
}

// TelegramNotificationSettingsErrorMessageType0 defines model for TelegramNotificationSettings.ErrorMessageType.0.
type TelegramNotificationSettingsErrorMessageType0 string

// TelegramNotificationSettingsErrorMessageType1 defines model for TelegramNotificationSettings.ErrorMessageType.1.
type TelegramNotificationSettingsErrorMessageType1 string

// TelegramNotificationSettings_ErrorMessageType defines model for TelegramNotificationSettings.ErrorMessageType.
type TelegramNotificationSettings_ErrorMessageType struct {
	union json.RawMessage
}

// TelegramNotificationSettingsSpaceMessageType0 defines model for TelegramNotificationSettings.SpaceMessageType.0.
type TelegramNotificationSettingsSpaceMessageType0 string

// TelegramNotificationSettingsSpaceMessageType1 defines model for TelegramNotificationSettings.SpaceMessageType.1.
type TelegramNotificationSettingsSpaceMessageType1 string

// TelegramNotificationSettings_SpaceMessageType defines model for TelegramNotificationSettings.SpaceMessageType.
type TelegramNotificationSettings_SpaceMessageType struct {
	union json.RawMessage
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// WebHookSettings defines model for WebHookSettings.
type WebHookSettings struct {
	CoverImageDownloaded         *bool  `json:"coverImageDownloaded,omitempty"`
	DanmakuFileCompleted         *bool  `json:"danmakuFileCompleted,omitempty"`
	DanmakuFileCreated           *bool  `json:"danmakuFileCreated,omitempty"`
	ErrorOccurred                *bool  `json:"errorOccurred,omitempty"`
	LiveBegan                    *bool  `json:"liveBegan,omitempty"`
	LiveEnded                    *bool  `json:"liveEnded,omitempty"`
	PostprocessingCompleted      *bool  `json:"postprocessingCompleted,omitempty"`
	RawDanmakuFileCompleted      *bool  `json:"rawDanmakuFileCompleted,omitempty"`
	RawDanmakuFileCreated        *bool  `json:"rawDanmakuFileCreated,omitempty"`
	RecordingCancelled           *bool  `json:"recordingCancelled,omitempty"`
	RecordingFinished            *bool  `json:"recordingFinished,omitempty"`
	RecordingStarted             *bool  `json:"recordingStarted,omitempty"`
	RoomChange                   *bool  `json:"roomChange,omitempty"`
	SpaceNoEnough                *bool  `json:"spaceNoEnough,omitempty"`
	Url                          string `json:"url"`
	VideoFileCompleted           *bool  `json:"videoFileCompleted,omitempty"`
	VideoFileCreated             *bool  `json:"videoFileCreated,omitempty"`
	VideoPostprocessingCompleted *bool  `json:"videoPostprocessingCompleted,omitempty"`
}

// ExitAppApiV1AppExitPostParams defines parameters for ExitAppApiV1AppExitPost.
type ExitAppApiV1AppExitPostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetAppInfoApiV1AppInfoGetParams defines parameters for GetAppInfoApiV1AppInfoGet.
type GetAppInfoApiV1AppInfoGetParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// RestartAppApiV1AppRestartPostParams defines parameters for RestartAppApiV1AppRestartPost.
type RestartAppApiV1AppRestartPostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetAppStatusApiV1AppStatusGetParams defines parameters for GetAppStatusApiV1AppStatusGet.
type GetAppStatusApiV1AppStatusGetParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetSettingsApiV1SettingsGetParams defines parameters for GetSettingsApiV1SettingsGet.
type GetSettingsApiV1SettingsGetParams struct {
	Include *[]GetSettingsApiV1SettingsGetParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	Exclude *[]GetSettingsApiV1SettingsGetParamsExclude `form:"exclude,omitempty" json:"exclude,omitempty"`
	XApiKey *string                                     `json:"x-api-key,omitempty"`
}

// GetSettingsApiV1SettingsGetParamsInclude defines parameters for GetSettingsApiV1SettingsGet.
type GetSettingsApiV1SettingsGetParamsInclude string

// GetSettingsApiV1SettingsGetParamsExclude defines parameters for GetSettingsApiV1SettingsGet.
type GetSettingsApiV1SettingsGetParamsExclude string

// ChangeSettingsApiV1SettingsPatchParams defines parameters for ChangeSettingsApiV1SettingsPatch.
type ChangeSettingsApiV1SettingsPatchParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetTaskOptionsApiV1SettingsTasksRoomIdGetParams defines parameters for GetTaskOptionsApiV1SettingsTasksRoomIdGet.
type GetTaskOptionsApiV1SettingsTasksRoomIdGetParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams defines parameters for ChangeTaskOptionsApiV1SettingsTasksRoomIdPatch.
type ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// RemoveAllTasksApiV1TasksDeleteParams defines parameters for RemoveAllTasksApiV1TasksDelete.
type RemoveAllTasksApiV1TasksDeleteParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetTaskDataApiV1TasksDataGetParams defines parameters for GetTaskDataApiV1TasksDataGet.
type GetTaskDataApiV1TasksDataGetParams struct {
	Page    *int           `form:"page,omitempty" json:"page,omitempty"`
	Size    *int           `form:"size,omitempty" json:"size,omitempty"`
	Select  *DataSelection `form:"select,omitempty" json:"select,omitempty"`
	XApiKey *string        `json:"x-api-key,omitempty"`
}

// UpdateAllTaskInfosApiV1TasksInfoPostParams defines parameters for UpdateAllTaskInfosApiV1TasksInfoPost.
type UpdateAllTaskInfosApiV1TasksInfoPostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams defines parameters for DisableAllTaskRecordersApiV1TasksRecorderDisablePost.
type DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// EnableAllTaskRecordersApiV1TasksRecorderEnablePostParams defines parameters for EnableAllTaskRecordersApiV1TasksRecorderEnablePost.
type EnableAllTaskRecordersApiV1TasksRecorderEnablePostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// StartAllTasksApiV1TasksStartPostParams defines parameters for StartAllTasksApiV1TasksStartPost.
type StartAllTasksApiV1TasksStartPostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// StopAllTasksApiV1TasksStopPostParams defines parameters for StopAllTasksApiV1TasksStopPost.
type StopAllTasksApiV1TasksStopPostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// RemoveTaskApiV1TasksRoomIdDeleteParams defines parameters for RemoveTaskApiV1TasksRoomIdDelete.
type RemoveTaskApiV1TasksRoomIdDeleteParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// AddTaskApiV1TasksRoomIdPostParams defines parameters for AddTaskApiV1TasksRoomIdPost.
type AddTaskApiV1TasksRoomIdPostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// CanCutStreamApiV1TasksRoomIdCutGetParams defines parameters for CanCutStreamApiV1TasksRoomIdCutGet.
type CanCutStreamApiV1TasksRoomIdCutGetParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// CutStreamApiV1TasksRoomIdCutPostParams defines parameters for CutStreamApiV1TasksRoomIdCutPost.
type CutStreamApiV1TasksRoomIdCutPostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetParams defines parameters for GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGet.
type GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetOneTaskDataApiV1TasksRoomIdDataGetParams defines parameters for GetOneTaskDataApiV1TasksRoomIdDataGet.
type GetOneTaskDataApiV1TasksRoomIdDataGetParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// UpdateTaskInfoApiV1TasksRoomIdInfoPostParams defines parameters for UpdateTaskInfoApiV1TasksRoomIdInfoPost.
type UpdateTaskInfoApiV1TasksRoomIdInfoPostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetTaskMetadataApiV1TasksRoomIdMetadataGetParams defines parameters for GetTaskMetadataApiV1TasksRoomIdMetadataGet.
type GetTaskMetadataApiV1TasksRoomIdMetadataGetParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetTaskParamApiV1TasksRoomIdParamGetParams defines parameters for GetTaskParamApiV1TasksRoomIdParamGet.
type GetTaskParamApiV1TasksRoomIdParamGetParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetTaskStreamProfileApiV1TasksRoomIdProfileGetParams defines parameters for GetTaskStreamProfileApiV1TasksRoomIdProfileGet.
type GetTaskStreamProfileApiV1TasksRoomIdProfileGetParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams defines parameters for DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePost.
type DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostParams defines parameters for EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePost.
type EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// StartTaskApiV1TasksRoomIdStartPostParams defines parameters for StartTaskApiV1TasksRoomIdStartPost.
type StartTaskApiV1TasksRoomIdStartPostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// StopTaskApiV1TasksRoomIdStopPostParams defines parameters for StopTaskApiV1TasksRoomIdStopPost.
type StopTaskApiV1TasksRoomIdStopPostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetParams defines parameters for GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGet.
type GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetLatestVersionApiV1UpdateVersionLatestGetParams defines parameters for GetLatestVersionApiV1UpdateVersionLatestGet.
type GetLatestVersionApiV1UpdateVersionLatestGetParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// ValidateCookieApiV1ValidationCookiePostParams defines parameters for ValidateCookieApiV1ValidationCookiePost.
type ValidateCookieApiV1ValidationCookiePostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// ValidateDirApiV1ValidationDirPostParams defines parameters for ValidateDirApiV1ValidationDirPost.
type ValidateDirApiV1ValidationDirPostParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
}

// ChangeSettingsApiV1SettingsPatchJSONRequestBody defines body for ChangeSettingsApiV1SettingsPatch for application/json ContentType.
type ChangeSettingsApiV1SettingsPatchJSONRequestBody = SettingsIn

// ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchJSONRequestBody defines body for ChangeTaskOptionsApiV1SettingsTasksRoomIdPatch for application/json ContentType.
type ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchJSONRequestBody = TaskOptions

// DisableAllTaskRecordersApiV1TasksRecorderDisablePostJSONRequestBody defines body for DisableAllTaskRecordersApiV1TasksRecorderDisablePost for application/json ContentType.
type DisableAllTaskRecordersApiV1TasksRecorderDisablePostJSONRequestBody = BodyDisableAllTaskRecordersApiV1TasksRecorderDisablePost

// StopAllTasksApiV1TasksStopPostJSONRequestBody defines body for StopAllTasksApiV1TasksStopPost for application/json ContentType.
type StopAllTasksApiV1TasksStopPostJSONRequestBody = BodyStopAllTasksApiV1TasksStopPost

// DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostJSONRequestBody defines body for DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePost for application/json ContentType.
type DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostJSONRequestBody = BodyDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePost

// StopTaskApiV1TasksRoomIdStopPostJSONRequestBody defines body for StopTaskApiV1TasksRoomIdStopPost for application/json ContentType.
type StopTaskApiV1TasksRoomIdStopPostJSONRequestBody = BodyStopTaskApiV1TasksRoomIdStopPost

// ValidateCookieApiV1ValidationCookiePostJSONRequestBody defines body for ValidateCookieApiV1ValidationCookiePost for application/json ContentType.
type ValidateCookieApiV1ValidationCookiePostJSONRequestBody = BodyValidateCookieApiV1ValidationCookiePost

// ValidateDirApiV1ValidationDirPostJSONRequestBody defines body for ValidateDirApiV1ValidationDirPost for application/json ContentType.
type ValidateDirApiV1ValidationDirPostJSONRequestBody = BodyValidateDirApiV1ValidationDirPost

// AsBarkNotificationSettingsBeganMessageType0 returns the union data inside the BarkNotificationSettings_BeganMessageType as a BarkNotificationSettingsBeganMessageType0
func (t BarkNotificationSettings_BeganMessageType) AsBarkNotificationSettingsBeganMessageType0() (BarkNotificationSettingsBeganMessageType0, error) {
	var body BarkNotificationSettingsBeganMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBarkNotificationSettingsBeganMessageType0 overwrites any union data inside the BarkNotificationSettings_BeganMessageType as the provided BarkNotificationSettingsBeganMessageType0
func (t *BarkNotificationSettings_BeganMessageType) FromBarkNotificationSettingsBeganMessageType0(v BarkNotificationSettingsBeganMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBarkNotificationSettingsBeganMessageType0 performs a merge with any union data inside the BarkNotificationSettings_BeganMessageType, using the provided BarkNotificationSettingsBeganMessageType0
func (t *BarkNotificationSettings_BeganMessageType) MergeBarkNotificationSettingsBeganMessageType0(v BarkNotificationSettingsBeganMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBarkNotificationSettingsBeganMessageType1 returns the union data inside the BarkNotificationSettings_BeganMessageType as a BarkNotificationSettingsBeganMessageType1
func (t BarkNotificationSettings_BeganMessageType) AsBarkNotificationSettingsBeganMessageType1() (BarkNotificationSettingsBeganMessageType1, error) {
	var body BarkNotificationSettingsBeganMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBarkNotificationSettingsBeganMessageType1 overwrites any union data inside the BarkNotificationSettings_BeganMessageType as the provided BarkNotificationSettingsBeganMessageType1
func (t *BarkNotificationSettings_BeganMessageType) FromBarkNotificationSettingsBeganMessageType1(v BarkNotificationSettingsBeganMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBarkNotificationSettingsBeganMessageType1 performs a merge with any union data inside the BarkNotificationSettings_BeganMessageType, using the provided BarkNotificationSettingsBeganMessageType1
func (t *BarkNotificationSettings_BeganMessageType) MergeBarkNotificationSettingsBeganMessageType1(v BarkNotificationSettingsBeganMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BarkNotificationSettings_BeganMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BarkNotificationSettings_BeganMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBarkNotificationSettingsEndedMessageType0 returns the union data inside the BarkNotificationSettings_EndedMessageType as a BarkNotificationSettingsEndedMessageType0
func (t BarkNotificationSettings_EndedMessageType) AsBarkNotificationSettingsEndedMessageType0() (BarkNotificationSettingsEndedMessageType0, error) {
	var body BarkNotificationSettingsEndedMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBarkNotificationSettingsEndedMessageType0 overwrites any union data inside the BarkNotificationSettings_EndedMessageType as the provided BarkNotificationSettingsEndedMessageType0
func (t *BarkNotificationSettings_EndedMessageType) FromBarkNotificationSettingsEndedMessageType0(v BarkNotificationSettingsEndedMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBarkNotificationSettingsEndedMessageType0 performs a merge with any union data inside the BarkNotificationSettings_EndedMessageType, using the provided BarkNotificationSettingsEndedMessageType0
func (t *BarkNotificationSettings_EndedMessageType) MergeBarkNotificationSettingsEndedMessageType0(v BarkNotificationSettingsEndedMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBarkNotificationSettingsEndedMessageType1 returns the union data inside the BarkNotificationSettings_EndedMessageType as a BarkNotificationSettingsEndedMessageType1
func (t BarkNotificationSettings_EndedMessageType) AsBarkNotificationSettingsEndedMessageType1() (BarkNotificationSettingsEndedMessageType1, error) {
	var body BarkNotificationSettingsEndedMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBarkNotificationSettingsEndedMessageType1 overwrites any union data inside the BarkNotificationSettings_EndedMessageType as the provided BarkNotificationSettingsEndedMessageType1
func (t *BarkNotificationSettings_EndedMessageType) FromBarkNotificationSettingsEndedMessageType1(v BarkNotificationSettingsEndedMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBarkNotificationSettingsEndedMessageType1 performs a merge with any union data inside the BarkNotificationSettings_EndedMessageType, using the provided BarkNotificationSettingsEndedMessageType1
func (t *BarkNotificationSettings_EndedMessageType) MergeBarkNotificationSettingsEndedMessageType1(v BarkNotificationSettingsEndedMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BarkNotificationSettings_EndedMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BarkNotificationSettings_EndedMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBarkNotificationSettingsErrorMessageType0 returns the union data inside the BarkNotificationSettings_ErrorMessageType as a BarkNotificationSettingsErrorMessageType0
func (t BarkNotificationSettings_ErrorMessageType) AsBarkNotificationSettingsErrorMessageType0() (BarkNotificationSettingsErrorMessageType0, error) {
	var body BarkNotificationSettingsErrorMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBarkNotificationSettingsErrorMessageType0 overwrites any union data inside the BarkNotificationSettings_ErrorMessageType as the provided BarkNotificationSettingsErrorMessageType0
func (t *BarkNotificationSettings_ErrorMessageType) FromBarkNotificationSettingsErrorMessageType0(v BarkNotificationSettingsErrorMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBarkNotificationSettingsErrorMessageType0 performs a merge with any union data inside the BarkNotificationSettings_ErrorMessageType, using the provided BarkNotificationSettingsErrorMessageType0
func (t *BarkNotificationSettings_ErrorMessageType) MergeBarkNotificationSettingsErrorMessageType0(v BarkNotificationSettingsErrorMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBarkNotificationSettingsErrorMessageType1 returns the union data inside the BarkNotificationSettings_ErrorMessageType as a BarkNotificationSettingsErrorMessageType1
func (t BarkNotificationSettings_ErrorMessageType) AsBarkNotificationSettingsErrorMessageType1() (BarkNotificationSettingsErrorMessageType1, error) {
	var body BarkNotificationSettingsErrorMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBarkNotificationSettingsErrorMessageType1 overwrites any union data inside the BarkNotificationSettings_ErrorMessageType as the provided BarkNotificationSettingsErrorMessageType1
func (t *BarkNotificationSettings_ErrorMessageType) FromBarkNotificationSettingsErrorMessageType1(v BarkNotificationSettingsErrorMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBarkNotificationSettingsErrorMessageType1 performs a merge with any union data inside the BarkNotificationSettings_ErrorMessageType, using the provided BarkNotificationSettingsErrorMessageType1
func (t *BarkNotificationSettings_ErrorMessageType) MergeBarkNotificationSettingsErrorMessageType1(v BarkNotificationSettingsErrorMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BarkNotificationSettings_ErrorMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BarkNotificationSettings_ErrorMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBarkNotificationSettingsSpaceMessageType0 returns the union data inside the BarkNotificationSettings_SpaceMessageType as a BarkNotificationSettingsSpaceMessageType0
func (t BarkNotificationSettings_SpaceMessageType) AsBarkNotificationSettingsSpaceMessageType0() (BarkNotificationSettingsSpaceMessageType0, error) {
	var body BarkNotificationSettingsSpaceMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBarkNotificationSettingsSpaceMessageType0 overwrites any union data inside the BarkNotificationSettings_SpaceMessageType as the provided BarkNotificationSettingsSpaceMessageType0
func (t *BarkNotificationSettings_SpaceMessageType) FromBarkNotificationSettingsSpaceMessageType0(v BarkNotificationSettingsSpaceMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBarkNotificationSettingsSpaceMessageType0 performs a merge with any union data inside the BarkNotificationSettings_SpaceMessageType, using the provided BarkNotificationSettingsSpaceMessageType0
func (t *BarkNotificationSettings_SpaceMessageType) MergeBarkNotificationSettingsSpaceMessageType0(v BarkNotificationSettingsSpaceMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBarkNotificationSettingsSpaceMessageType1 returns the union data inside the BarkNotificationSettings_SpaceMessageType as a BarkNotificationSettingsSpaceMessageType1
func (t BarkNotificationSettings_SpaceMessageType) AsBarkNotificationSettingsSpaceMessageType1() (BarkNotificationSettingsSpaceMessageType1, error) {
	var body BarkNotificationSettingsSpaceMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBarkNotificationSettingsSpaceMessageType1 overwrites any union data inside the BarkNotificationSettings_SpaceMessageType as the provided BarkNotificationSettingsSpaceMessageType1
func (t *BarkNotificationSettings_SpaceMessageType) FromBarkNotificationSettingsSpaceMessageType1(v BarkNotificationSettingsSpaceMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBarkNotificationSettingsSpaceMessageType1 performs a merge with any union data inside the BarkNotificationSettings_SpaceMessageType, using the provided BarkNotificationSettingsSpaceMessageType1
func (t *BarkNotificationSettings_SpaceMessageType) MergeBarkNotificationSettingsSpaceMessageType1(v BarkNotificationSettingsSpaceMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BarkNotificationSettings_SpaceMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BarkNotificationSettings_SpaceMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailNotificationSettingsBeganMessageType0 returns the union data inside the EmailNotificationSettings_BeganMessageType as a EmailNotificationSettingsBeganMessageType0
func (t EmailNotificationSettings_BeganMessageType) AsEmailNotificationSettingsBeganMessageType0() (EmailNotificationSettingsBeganMessageType0, error) {
	var body EmailNotificationSettingsBeganMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailNotificationSettingsBeganMessageType0 overwrites any union data inside the EmailNotificationSettings_BeganMessageType as the provided EmailNotificationSettingsBeganMessageType0
func (t *EmailNotificationSettings_BeganMessageType) FromEmailNotificationSettingsBeganMessageType0(v EmailNotificationSettingsBeganMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailNotificationSettingsBeganMessageType0 performs a merge with any union data inside the EmailNotificationSettings_BeganMessageType, using the provided EmailNotificationSettingsBeganMessageType0
func (t *EmailNotificationSettings_BeganMessageType) MergeEmailNotificationSettingsBeganMessageType0(v EmailNotificationSettingsBeganMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEmailNotificationSettingsBeganMessageType1 returns the union data inside the EmailNotificationSettings_BeganMessageType as a EmailNotificationSettingsBeganMessageType1
func (t EmailNotificationSettings_BeganMessageType) AsEmailNotificationSettingsBeganMessageType1() (EmailNotificationSettingsBeganMessageType1, error) {
	var body EmailNotificationSettingsBeganMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailNotificationSettingsBeganMessageType1 overwrites any union data inside the EmailNotificationSettings_BeganMessageType as the provided EmailNotificationSettingsBeganMessageType1
func (t *EmailNotificationSettings_BeganMessageType) FromEmailNotificationSettingsBeganMessageType1(v EmailNotificationSettingsBeganMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailNotificationSettingsBeganMessageType1 performs a merge with any union data inside the EmailNotificationSettings_BeganMessageType, using the provided EmailNotificationSettingsBeganMessageType1
func (t *EmailNotificationSettings_BeganMessageType) MergeEmailNotificationSettingsBeganMessageType1(v EmailNotificationSettingsBeganMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EmailNotificationSettings_BeganMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EmailNotificationSettings_BeganMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailNotificationSettingsEndedMessageType0 returns the union data inside the EmailNotificationSettings_EndedMessageType as a EmailNotificationSettingsEndedMessageType0
func (t EmailNotificationSettings_EndedMessageType) AsEmailNotificationSettingsEndedMessageType0() (EmailNotificationSettingsEndedMessageType0, error) {
	var body EmailNotificationSettingsEndedMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailNotificationSettingsEndedMessageType0 overwrites any union data inside the EmailNotificationSettings_EndedMessageType as the provided EmailNotificationSettingsEndedMessageType0
func (t *EmailNotificationSettings_EndedMessageType) FromEmailNotificationSettingsEndedMessageType0(v EmailNotificationSettingsEndedMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailNotificationSettingsEndedMessageType0 performs a merge with any union data inside the EmailNotificationSettings_EndedMessageType, using the provided EmailNotificationSettingsEndedMessageType0
func (t *EmailNotificationSettings_EndedMessageType) MergeEmailNotificationSettingsEndedMessageType0(v EmailNotificationSettingsEndedMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEmailNotificationSettingsEndedMessageType1 returns the union data inside the EmailNotificationSettings_EndedMessageType as a EmailNotificationSettingsEndedMessageType1
func (t EmailNotificationSettings_EndedMessageType) AsEmailNotificationSettingsEndedMessageType1() (EmailNotificationSettingsEndedMessageType1, error) {
	var body EmailNotificationSettingsEndedMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailNotificationSettingsEndedMessageType1 overwrites any union data inside the EmailNotificationSettings_EndedMessageType as the provided EmailNotificationSettingsEndedMessageType1
func (t *EmailNotificationSettings_EndedMessageType) FromEmailNotificationSettingsEndedMessageType1(v EmailNotificationSettingsEndedMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailNotificationSettingsEndedMessageType1 performs a merge with any union data inside the EmailNotificationSettings_EndedMessageType, using the provided EmailNotificationSettingsEndedMessageType1
func (t *EmailNotificationSettings_EndedMessageType) MergeEmailNotificationSettingsEndedMessageType1(v EmailNotificationSettingsEndedMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EmailNotificationSettings_EndedMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EmailNotificationSettings_EndedMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailNotificationSettingsErrorMessageType0 returns the union data inside the EmailNotificationSettings_ErrorMessageType as a EmailNotificationSettingsErrorMessageType0
func (t EmailNotificationSettings_ErrorMessageType) AsEmailNotificationSettingsErrorMessageType0() (EmailNotificationSettingsErrorMessageType0, error) {
	var body EmailNotificationSettingsErrorMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailNotificationSettingsErrorMessageType0 overwrites any union data inside the EmailNotificationSettings_ErrorMessageType as the provided EmailNotificationSettingsErrorMessageType0
func (t *EmailNotificationSettings_ErrorMessageType) FromEmailNotificationSettingsErrorMessageType0(v EmailNotificationSettingsErrorMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailNotificationSettingsErrorMessageType0 performs a merge with any union data inside the EmailNotificationSettings_ErrorMessageType, using the provided EmailNotificationSettingsErrorMessageType0
func (t *EmailNotificationSettings_ErrorMessageType) MergeEmailNotificationSettingsErrorMessageType0(v EmailNotificationSettingsErrorMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEmailNotificationSettingsErrorMessageType1 returns the union data inside the EmailNotificationSettings_ErrorMessageType as a EmailNotificationSettingsErrorMessageType1
func (t EmailNotificationSettings_ErrorMessageType) AsEmailNotificationSettingsErrorMessageType1() (EmailNotificationSettingsErrorMessageType1, error) {
	var body EmailNotificationSettingsErrorMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailNotificationSettingsErrorMessageType1 overwrites any union data inside the EmailNotificationSettings_ErrorMessageType as the provided EmailNotificationSettingsErrorMessageType1
func (t *EmailNotificationSettings_ErrorMessageType) FromEmailNotificationSettingsErrorMessageType1(v EmailNotificationSettingsErrorMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailNotificationSettingsErrorMessageType1 performs a merge with any union data inside the EmailNotificationSettings_ErrorMessageType, using the provided EmailNotificationSettingsErrorMessageType1
func (t *EmailNotificationSettings_ErrorMessageType) MergeEmailNotificationSettingsErrorMessageType1(v EmailNotificationSettingsErrorMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EmailNotificationSettings_ErrorMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EmailNotificationSettings_ErrorMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailNotificationSettingsSpaceMessageType0 returns the union data inside the EmailNotificationSettings_SpaceMessageType as a EmailNotificationSettingsSpaceMessageType0
func (t EmailNotificationSettings_SpaceMessageType) AsEmailNotificationSettingsSpaceMessageType0() (EmailNotificationSettingsSpaceMessageType0, error) {
	var body EmailNotificationSettingsSpaceMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailNotificationSettingsSpaceMessageType0 overwrites any union data inside the EmailNotificationSettings_SpaceMessageType as the provided EmailNotificationSettingsSpaceMessageType0
func (t *EmailNotificationSettings_SpaceMessageType) FromEmailNotificationSettingsSpaceMessageType0(v EmailNotificationSettingsSpaceMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailNotificationSettingsSpaceMessageType0 performs a merge with any union data inside the EmailNotificationSettings_SpaceMessageType, using the provided EmailNotificationSettingsSpaceMessageType0
func (t *EmailNotificationSettings_SpaceMessageType) MergeEmailNotificationSettingsSpaceMessageType0(v EmailNotificationSettingsSpaceMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEmailNotificationSettingsSpaceMessageType1 returns the union data inside the EmailNotificationSettings_SpaceMessageType as a EmailNotificationSettingsSpaceMessageType1
func (t EmailNotificationSettings_SpaceMessageType) AsEmailNotificationSettingsSpaceMessageType1() (EmailNotificationSettingsSpaceMessageType1, error) {
	var body EmailNotificationSettingsSpaceMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailNotificationSettingsSpaceMessageType1 overwrites any union data inside the EmailNotificationSettings_SpaceMessageType as the provided EmailNotificationSettingsSpaceMessageType1
func (t *EmailNotificationSettings_SpaceMessageType) FromEmailNotificationSettingsSpaceMessageType1(v EmailNotificationSettingsSpaceMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailNotificationSettingsSpaceMessageType1 performs a merge with any union data inside the EmailNotificationSettings_SpaceMessageType, using the provided EmailNotificationSettingsSpaceMessageType1
func (t *EmailNotificationSettings_SpaceMessageType) MergeEmailNotificationSettingsSpaceMessageType1(v EmailNotificationSettingsSpaceMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EmailNotificationSettings_SpaceMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EmailNotificationSettings_SpaceMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPushdeerNotificationSettingsBeganMessageType0 returns the union data inside the PushdeerNotificationSettings_BeganMessageType as a PushdeerNotificationSettingsBeganMessageType0
func (t PushdeerNotificationSettings_BeganMessageType) AsPushdeerNotificationSettingsBeganMessageType0() (PushdeerNotificationSettingsBeganMessageType0, error) {
	var body PushdeerNotificationSettingsBeganMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsBeganMessageType0 overwrites any union data inside the PushdeerNotificationSettings_BeganMessageType as the provided PushdeerNotificationSettingsBeganMessageType0
func (t *PushdeerNotificationSettings_BeganMessageType) FromPushdeerNotificationSettingsBeganMessageType0(v PushdeerNotificationSettingsBeganMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsBeganMessageType0 performs a merge with any union data inside the PushdeerNotificationSettings_BeganMessageType, using the provided PushdeerNotificationSettingsBeganMessageType0
func (t *PushdeerNotificationSettings_BeganMessageType) MergePushdeerNotificationSettingsBeganMessageType0(v PushdeerNotificationSettingsBeganMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushdeerNotificationSettingsBeganMessageType1 returns the union data inside the PushdeerNotificationSettings_BeganMessageType as a PushdeerNotificationSettingsBeganMessageType1
func (t PushdeerNotificationSettings_BeganMessageType) AsPushdeerNotificationSettingsBeganMessageType1() (PushdeerNotificationSettingsBeganMessageType1, error) {
	var body PushdeerNotificationSettingsBeganMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsBeganMessageType1 overwrites any union data inside the PushdeerNotificationSettings_BeganMessageType as the provided PushdeerNotificationSettingsBeganMessageType1
func (t *PushdeerNotificationSettings_BeganMessageType) FromPushdeerNotificationSettingsBeganMessageType1(v PushdeerNotificationSettingsBeganMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsBeganMessageType1 performs a merge with any union data inside the PushdeerNotificationSettings_BeganMessageType, using the provided PushdeerNotificationSettingsBeganMessageType1
func (t *PushdeerNotificationSettings_BeganMessageType) MergePushdeerNotificationSettingsBeganMessageType1(v PushdeerNotificationSettingsBeganMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushdeerNotificationSettingsBeganMessageType2 returns the union data inside the PushdeerNotificationSettings_BeganMessageType as a PushdeerNotificationSettingsBeganMessageType2
func (t PushdeerNotificationSettings_BeganMessageType) AsPushdeerNotificationSettingsBeganMessageType2() (PushdeerNotificationSettingsBeganMessageType2, error) {
	var body PushdeerNotificationSettingsBeganMessageType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsBeganMessageType2 overwrites any union data inside the PushdeerNotificationSettings_BeganMessageType as the provided PushdeerNotificationSettingsBeganMessageType2
func (t *PushdeerNotificationSettings_BeganMessageType) FromPushdeerNotificationSettingsBeganMessageType2(v PushdeerNotificationSettingsBeganMessageType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsBeganMessageType2 performs a merge with any union data inside the PushdeerNotificationSettings_BeganMessageType, using the provided PushdeerNotificationSettingsBeganMessageType2
func (t *PushdeerNotificationSettings_BeganMessageType) MergePushdeerNotificationSettingsBeganMessageType2(v PushdeerNotificationSettingsBeganMessageType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PushdeerNotificationSettings_BeganMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PushdeerNotificationSettings_BeganMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPushdeerNotificationSettingsEndedMessageType0 returns the union data inside the PushdeerNotificationSettings_EndedMessageType as a PushdeerNotificationSettingsEndedMessageType0
func (t PushdeerNotificationSettings_EndedMessageType) AsPushdeerNotificationSettingsEndedMessageType0() (PushdeerNotificationSettingsEndedMessageType0, error) {
	var body PushdeerNotificationSettingsEndedMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsEndedMessageType0 overwrites any union data inside the PushdeerNotificationSettings_EndedMessageType as the provided PushdeerNotificationSettingsEndedMessageType0
func (t *PushdeerNotificationSettings_EndedMessageType) FromPushdeerNotificationSettingsEndedMessageType0(v PushdeerNotificationSettingsEndedMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsEndedMessageType0 performs a merge with any union data inside the PushdeerNotificationSettings_EndedMessageType, using the provided PushdeerNotificationSettingsEndedMessageType0
func (t *PushdeerNotificationSettings_EndedMessageType) MergePushdeerNotificationSettingsEndedMessageType0(v PushdeerNotificationSettingsEndedMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushdeerNotificationSettingsEndedMessageType1 returns the union data inside the PushdeerNotificationSettings_EndedMessageType as a PushdeerNotificationSettingsEndedMessageType1
func (t PushdeerNotificationSettings_EndedMessageType) AsPushdeerNotificationSettingsEndedMessageType1() (PushdeerNotificationSettingsEndedMessageType1, error) {
	var body PushdeerNotificationSettingsEndedMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsEndedMessageType1 overwrites any union data inside the PushdeerNotificationSettings_EndedMessageType as the provided PushdeerNotificationSettingsEndedMessageType1
func (t *PushdeerNotificationSettings_EndedMessageType) FromPushdeerNotificationSettingsEndedMessageType1(v PushdeerNotificationSettingsEndedMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsEndedMessageType1 performs a merge with any union data inside the PushdeerNotificationSettings_EndedMessageType, using the provided PushdeerNotificationSettingsEndedMessageType1
func (t *PushdeerNotificationSettings_EndedMessageType) MergePushdeerNotificationSettingsEndedMessageType1(v PushdeerNotificationSettingsEndedMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushdeerNotificationSettingsEndedMessageType2 returns the union data inside the PushdeerNotificationSettings_EndedMessageType as a PushdeerNotificationSettingsEndedMessageType2
func (t PushdeerNotificationSettings_EndedMessageType) AsPushdeerNotificationSettingsEndedMessageType2() (PushdeerNotificationSettingsEndedMessageType2, error) {
	var body PushdeerNotificationSettingsEndedMessageType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsEndedMessageType2 overwrites any union data inside the PushdeerNotificationSettings_EndedMessageType as the provided PushdeerNotificationSettingsEndedMessageType2
func (t *PushdeerNotificationSettings_EndedMessageType) FromPushdeerNotificationSettingsEndedMessageType2(v PushdeerNotificationSettingsEndedMessageType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsEndedMessageType2 performs a merge with any union data inside the PushdeerNotificationSettings_EndedMessageType, using the provided PushdeerNotificationSettingsEndedMessageType2
func (t *PushdeerNotificationSettings_EndedMessageType) MergePushdeerNotificationSettingsEndedMessageType2(v PushdeerNotificationSettingsEndedMessageType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PushdeerNotificationSettings_EndedMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PushdeerNotificationSettings_EndedMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPushdeerNotificationSettingsErrorMessageType0 returns the union data inside the PushdeerNotificationSettings_ErrorMessageType as a PushdeerNotificationSettingsErrorMessageType0
func (t PushdeerNotificationSettings_ErrorMessageType) AsPushdeerNotificationSettingsErrorMessageType0() (PushdeerNotificationSettingsErrorMessageType0, error) {
	var body PushdeerNotificationSettingsErrorMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsErrorMessageType0 overwrites any union data inside the PushdeerNotificationSettings_ErrorMessageType as the provided PushdeerNotificationSettingsErrorMessageType0
func (t *PushdeerNotificationSettings_ErrorMessageType) FromPushdeerNotificationSettingsErrorMessageType0(v PushdeerNotificationSettingsErrorMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsErrorMessageType0 performs a merge with any union data inside the PushdeerNotificationSettings_ErrorMessageType, using the provided PushdeerNotificationSettingsErrorMessageType0
func (t *PushdeerNotificationSettings_ErrorMessageType) MergePushdeerNotificationSettingsErrorMessageType0(v PushdeerNotificationSettingsErrorMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushdeerNotificationSettingsErrorMessageType1 returns the union data inside the PushdeerNotificationSettings_ErrorMessageType as a PushdeerNotificationSettingsErrorMessageType1
func (t PushdeerNotificationSettings_ErrorMessageType) AsPushdeerNotificationSettingsErrorMessageType1() (PushdeerNotificationSettingsErrorMessageType1, error) {
	var body PushdeerNotificationSettingsErrorMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsErrorMessageType1 overwrites any union data inside the PushdeerNotificationSettings_ErrorMessageType as the provided PushdeerNotificationSettingsErrorMessageType1
func (t *PushdeerNotificationSettings_ErrorMessageType) FromPushdeerNotificationSettingsErrorMessageType1(v PushdeerNotificationSettingsErrorMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsErrorMessageType1 performs a merge with any union data inside the PushdeerNotificationSettings_ErrorMessageType, using the provided PushdeerNotificationSettingsErrorMessageType1
func (t *PushdeerNotificationSettings_ErrorMessageType) MergePushdeerNotificationSettingsErrorMessageType1(v PushdeerNotificationSettingsErrorMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushdeerNotificationSettingsErrorMessageType2 returns the union data inside the PushdeerNotificationSettings_ErrorMessageType as a PushdeerNotificationSettingsErrorMessageType2
func (t PushdeerNotificationSettings_ErrorMessageType) AsPushdeerNotificationSettingsErrorMessageType2() (PushdeerNotificationSettingsErrorMessageType2, error) {
	var body PushdeerNotificationSettingsErrorMessageType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsErrorMessageType2 overwrites any union data inside the PushdeerNotificationSettings_ErrorMessageType as the provided PushdeerNotificationSettingsErrorMessageType2
func (t *PushdeerNotificationSettings_ErrorMessageType) FromPushdeerNotificationSettingsErrorMessageType2(v PushdeerNotificationSettingsErrorMessageType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsErrorMessageType2 performs a merge with any union data inside the PushdeerNotificationSettings_ErrorMessageType, using the provided PushdeerNotificationSettingsErrorMessageType2
func (t *PushdeerNotificationSettings_ErrorMessageType) MergePushdeerNotificationSettingsErrorMessageType2(v PushdeerNotificationSettingsErrorMessageType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PushdeerNotificationSettings_ErrorMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PushdeerNotificationSettings_ErrorMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPushdeerNotificationSettingsSpaceMessageType0 returns the union data inside the PushdeerNotificationSettings_SpaceMessageType as a PushdeerNotificationSettingsSpaceMessageType0
func (t PushdeerNotificationSettings_SpaceMessageType) AsPushdeerNotificationSettingsSpaceMessageType0() (PushdeerNotificationSettingsSpaceMessageType0, error) {
	var body PushdeerNotificationSettingsSpaceMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsSpaceMessageType0 overwrites any union data inside the PushdeerNotificationSettings_SpaceMessageType as the provided PushdeerNotificationSettingsSpaceMessageType0
func (t *PushdeerNotificationSettings_SpaceMessageType) FromPushdeerNotificationSettingsSpaceMessageType0(v PushdeerNotificationSettingsSpaceMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsSpaceMessageType0 performs a merge with any union data inside the PushdeerNotificationSettings_SpaceMessageType, using the provided PushdeerNotificationSettingsSpaceMessageType0
func (t *PushdeerNotificationSettings_SpaceMessageType) MergePushdeerNotificationSettingsSpaceMessageType0(v PushdeerNotificationSettingsSpaceMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushdeerNotificationSettingsSpaceMessageType1 returns the union data inside the PushdeerNotificationSettings_SpaceMessageType as a PushdeerNotificationSettingsSpaceMessageType1
func (t PushdeerNotificationSettings_SpaceMessageType) AsPushdeerNotificationSettingsSpaceMessageType1() (PushdeerNotificationSettingsSpaceMessageType1, error) {
	var body PushdeerNotificationSettingsSpaceMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsSpaceMessageType1 overwrites any union data inside the PushdeerNotificationSettings_SpaceMessageType as the provided PushdeerNotificationSettingsSpaceMessageType1
func (t *PushdeerNotificationSettings_SpaceMessageType) FromPushdeerNotificationSettingsSpaceMessageType1(v PushdeerNotificationSettingsSpaceMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsSpaceMessageType1 performs a merge with any union data inside the PushdeerNotificationSettings_SpaceMessageType, using the provided PushdeerNotificationSettingsSpaceMessageType1
func (t *PushdeerNotificationSettings_SpaceMessageType) MergePushdeerNotificationSettingsSpaceMessageType1(v PushdeerNotificationSettingsSpaceMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushdeerNotificationSettingsSpaceMessageType2 returns the union data inside the PushdeerNotificationSettings_SpaceMessageType as a PushdeerNotificationSettingsSpaceMessageType2
func (t PushdeerNotificationSettings_SpaceMessageType) AsPushdeerNotificationSettingsSpaceMessageType2() (PushdeerNotificationSettingsSpaceMessageType2, error) {
	var body PushdeerNotificationSettingsSpaceMessageType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushdeerNotificationSettingsSpaceMessageType2 overwrites any union data inside the PushdeerNotificationSettings_SpaceMessageType as the provided PushdeerNotificationSettingsSpaceMessageType2
func (t *PushdeerNotificationSettings_SpaceMessageType) FromPushdeerNotificationSettingsSpaceMessageType2(v PushdeerNotificationSettingsSpaceMessageType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushdeerNotificationSettingsSpaceMessageType2 performs a merge with any union data inside the PushdeerNotificationSettings_SpaceMessageType, using the provided PushdeerNotificationSettingsSpaceMessageType2
func (t *PushdeerNotificationSettings_SpaceMessageType) MergePushdeerNotificationSettingsSpaceMessageType2(v PushdeerNotificationSettingsSpaceMessageType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PushdeerNotificationSettings_SpaceMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PushdeerNotificationSettings_SpaceMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPushplusNotificationSettingsBeganMessageType0 returns the union data inside the PushplusNotificationSettings_BeganMessageType as a PushplusNotificationSettingsBeganMessageType0
func (t PushplusNotificationSettings_BeganMessageType) AsPushplusNotificationSettingsBeganMessageType0() (PushplusNotificationSettingsBeganMessageType0, error) {
	var body PushplusNotificationSettingsBeganMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsBeganMessageType0 overwrites any union data inside the PushplusNotificationSettings_BeganMessageType as the provided PushplusNotificationSettingsBeganMessageType0
func (t *PushplusNotificationSettings_BeganMessageType) FromPushplusNotificationSettingsBeganMessageType0(v PushplusNotificationSettingsBeganMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsBeganMessageType0 performs a merge with any union data inside the PushplusNotificationSettings_BeganMessageType, using the provided PushplusNotificationSettingsBeganMessageType0
func (t *PushplusNotificationSettings_BeganMessageType) MergePushplusNotificationSettingsBeganMessageType0(v PushplusNotificationSettingsBeganMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushplusNotificationSettingsBeganMessageType1 returns the union data inside the PushplusNotificationSettings_BeganMessageType as a PushplusNotificationSettingsBeganMessageType1
func (t PushplusNotificationSettings_BeganMessageType) AsPushplusNotificationSettingsBeganMessageType1() (PushplusNotificationSettingsBeganMessageType1, error) {
	var body PushplusNotificationSettingsBeganMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsBeganMessageType1 overwrites any union data inside the PushplusNotificationSettings_BeganMessageType as the provided PushplusNotificationSettingsBeganMessageType1
func (t *PushplusNotificationSettings_BeganMessageType) FromPushplusNotificationSettingsBeganMessageType1(v PushplusNotificationSettingsBeganMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsBeganMessageType1 performs a merge with any union data inside the PushplusNotificationSettings_BeganMessageType, using the provided PushplusNotificationSettingsBeganMessageType1
func (t *PushplusNotificationSettings_BeganMessageType) MergePushplusNotificationSettingsBeganMessageType1(v PushplusNotificationSettingsBeganMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushplusNotificationSettingsBeganMessageType2 returns the union data inside the PushplusNotificationSettings_BeganMessageType as a PushplusNotificationSettingsBeganMessageType2
func (t PushplusNotificationSettings_BeganMessageType) AsPushplusNotificationSettingsBeganMessageType2() (PushplusNotificationSettingsBeganMessageType2, error) {
	var body PushplusNotificationSettingsBeganMessageType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsBeganMessageType2 overwrites any union data inside the PushplusNotificationSettings_BeganMessageType as the provided PushplusNotificationSettingsBeganMessageType2
func (t *PushplusNotificationSettings_BeganMessageType) FromPushplusNotificationSettingsBeganMessageType2(v PushplusNotificationSettingsBeganMessageType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsBeganMessageType2 performs a merge with any union data inside the PushplusNotificationSettings_BeganMessageType, using the provided PushplusNotificationSettingsBeganMessageType2
func (t *PushplusNotificationSettings_BeganMessageType) MergePushplusNotificationSettingsBeganMessageType2(v PushplusNotificationSettingsBeganMessageType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PushplusNotificationSettings_BeganMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PushplusNotificationSettings_BeganMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPushplusNotificationSettingsEndedMessageType0 returns the union data inside the PushplusNotificationSettings_EndedMessageType as a PushplusNotificationSettingsEndedMessageType0
func (t PushplusNotificationSettings_EndedMessageType) AsPushplusNotificationSettingsEndedMessageType0() (PushplusNotificationSettingsEndedMessageType0, error) {
	var body PushplusNotificationSettingsEndedMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsEndedMessageType0 overwrites any union data inside the PushplusNotificationSettings_EndedMessageType as the provided PushplusNotificationSettingsEndedMessageType0
func (t *PushplusNotificationSettings_EndedMessageType) FromPushplusNotificationSettingsEndedMessageType0(v PushplusNotificationSettingsEndedMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsEndedMessageType0 performs a merge with any union data inside the PushplusNotificationSettings_EndedMessageType, using the provided PushplusNotificationSettingsEndedMessageType0
func (t *PushplusNotificationSettings_EndedMessageType) MergePushplusNotificationSettingsEndedMessageType0(v PushplusNotificationSettingsEndedMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushplusNotificationSettingsEndedMessageType1 returns the union data inside the PushplusNotificationSettings_EndedMessageType as a PushplusNotificationSettingsEndedMessageType1
func (t PushplusNotificationSettings_EndedMessageType) AsPushplusNotificationSettingsEndedMessageType1() (PushplusNotificationSettingsEndedMessageType1, error) {
	var body PushplusNotificationSettingsEndedMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsEndedMessageType1 overwrites any union data inside the PushplusNotificationSettings_EndedMessageType as the provided PushplusNotificationSettingsEndedMessageType1
func (t *PushplusNotificationSettings_EndedMessageType) FromPushplusNotificationSettingsEndedMessageType1(v PushplusNotificationSettingsEndedMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsEndedMessageType1 performs a merge with any union data inside the PushplusNotificationSettings_EndedMessageType, using the provided PushplusNotificationSettingsEndedMessageType1
func (t *PushplusNotificationSettings_EndedMessageType) MergePushplusNotificationSettingsEndedMessageType1(v PushplusNotificationSettingsEndedMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushplusNotificationSettingsEndedMessageType2 returns the union data inside the PushplusNotificationSettings_EndedMessageType as a PushplusNotificationSettingsEndedMessageType2
func (t PushplusNotificationSettings_EndedMessageType) AsPushplusNotificationSettingsEndedMessageType2() (PushplusNotificationSettingsEndedMessageType2, error) {
	var body PushplusNotificationSettingsEndedMessageType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsEndedMessageType2 overwrites any union data inside the PushplusNotificationSettings_EndedMessageType as the provided PushplusNotificationSettingsEndedMessageType2
func (t *PushplusNotificationSettings_EndedMessageType) FromPushplusNotificationSettingsEndedMessageType2(v PushplusNotificationSettingsEndedMessageType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsEndedMessageType2 performs a merge with any union data inside the PushplusNotificationSettings_EndedMessageType, using the provided PushplusNotificationSettingsEndedMessageType2
func (t *PushplusNotificationSettings_EndedMessageType) MergePushplusNotificationSettingsEndedMessageType2(v PushplusNotificationSettingsEndedMessageType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PushplusNotificationSettings_EndedMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PushplusNotificationSettings_EndedMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPushplusNotificationSettingsErrorMessageType0 returns the union data inside the PushplusNotificationSettings_ErrorMessageType as a PushplusNotificationSettingsErrorMessageType0
func (t PushplusNotificationSettings_ErrorMessageType) AsPushplusNotificationSettingsErrorMessageType0() (PushplusNotificationSettingsErrorMessageType0, error) {
	var body PushplusNotificationSettingsErrorMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsErrorMessageType0 overwrites any union data inside the PushplusNotificationSettings_ErrorMessageType as the provided PushplusNotificationSettingsErrorMessageType0
func (t *PushplusNotificationSettings_ErrorMessageType) FromPushplusNotificationSettingsErrorMessageType0(v PushplusNotificationSettingsErrorMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsErrorMessageType0 performs a merge with any union data inside the PushplusNotificationSettings_ErrorMessageType, using the provided PushplusNotificationSettingsErrorMessageType0
func (t *PushplusNotificationSettings_ErrorMessageType) MergePushplusNotificationSettingsErrorMessageType0(v PushplusNotificationSettingsErrorMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushplusNotificationSettingsErrorMessageType1 returns the union data inside the PushplusNotificationSettings_ErrorMessageType as a PushplusNotificationSettingsErrorMessageType1
func (t PushplusNotificationSettings_ErrorMessageType) AsPushplusNotificationSettingsErrorMessageType1() (PushplusNotificationSettingsErrorMessageType1, error) {
	var body PushplusNotificationSettingsErrorMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsErrorMessageType1 overwrites any union data inside the PushplusNotificationSettings_ErrorMessageType as the provided PushplusNotificationSettingsErrorMessageType1
func (t *PushplusNotificationSettings_ErrorMessageType) FromPushplusNotificationSettingsErrorMessageType1(v PushplusNotificationSettingsErrorMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsErrorMessageType1 performs a merge with any union data inside the PushplusNotificationSettings_ErrorMessageType, using the provided PushplusNotificationSettingsErrorMessageType1
func (t *PushplusNotificationSettings_ErrorMessageType) MergePushplusNotificationSettingsErrorMessageType1(v PushplusNotificationSettingsErrorMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushplusNotificationSettingsErrorMessageType2 returns the union data inside the PushplusNotificationSettings_ErrorMessageType as a PushplusNotificationSettingsErrorMessageType2
func (t PushplusNotificationSettings_ErrorMessageType) AsPushplusNotificationSettingsErrorMessageType2() (PushplusNotificationSettingsErrorMessageType2, error) {
	var body PushplusNotificationSettingsErrorMessageType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsErrorMessageType2 overwrites any union data inside the PushplusNotificationSettings_ErrorMessageType as the provided PushplusNotificationSettingsErrorMessageType2
func (t *PushplusNotificationSettings_ErrorMessageType) FromPushplusNotificationSettingsErrorMessageType2(v PushplusNotificationSettingsErrorMessageType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsErrorMessageType2 performs a merge with any union data inside the PushplusNotificationSettings_ErrorMessageType, using the provided PushplusNotificationSettingsErrorMessageType2
func (t *PushplusNotificationSettings_ErrorMessageType) MergePushplusNotificationSettingsErrorMessageType2(v PushplusNotificationSettingsErrorMessageType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PushplusNotificationSettings_ErrorMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PushplusNotificationSettings_ErrorMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPushplusNotificationSettingsSpaceMessageType0 returns the union data inside the PushplusNotificationSettings_SpaceMessageType as a PushplusNotificationSettingsSpaceMessageType0
func (t PushplusNotificationSettings_SpaceMessageType) AsPushplusNotificationSettingsSpaceMessageType0() (PushplusNotificationSettingsSpaceMessageType0, error) {
	var body PushplusNotificationSettingsSpaceMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsSpaceMessageType0 overwrites any union data inside the PushplusNotificationSettings_SpaceMessageType as the provided PushplusNotificationSettingsSpaceMessageType0
func (t *PushplusNotificationSettings_SpaceMessageType) FromPushplusNotificationSettingsSpaceMessageType0(v PushplusNotificationSettingsSpaceMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsSpaceMessageType0 performs a merge with any union data inside the PushplusNotificationSettings_SpaceMessageType, using the provided PushplusNotificationSettingsSpaceMessageType0
func (t *PushplusNotificationSettings_SpaceMessageType) MergePushplusNotificationSettingsSpaceMessageType0(v PushplusNotificationSettingsSpaceMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushplusNotificationSettingsSpaceMessageType1 returns the union data inside the PushplusNotificationSettings_SpaceMessageType as a PushplusNotificationSettingsSpaceMessageType1
func (t PushplusNotificationSettings_SpaceMessageType) AsPushplusNotificationSettingsSpaceMessageType1() (PushplusNotificationSettingsSpaceMessageType1, error) {
	var body PushplusNotificationSettingsSpaceMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsSpaceMessageType1 overwrites any union data inside the PushplusNotificationSettings_SpaceMessageType as the provided PushplusNotificationSettingsSpaceMessageType1
func (t *PushplusNotificationSettings_SpaceMessageType) FromPushplusNotificationSettingsSpaceMessageType1(v PushplusNotificationSettingsSpaceMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsSpaceMessageType1 performs a merge with any union data inside the PushplusNotificationSettings_SpaceMessageType, using the provided PushplusNotificationSettingsSpaceMessageType1
func (t *PushplusNotificationSettings_SpaceMessageType) MergePushplusNotificationSettingsSpaceMessageType1(v PushplusNotificationSettingsSpaceMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPushplusNotificationSettingsSpaceMessageType2 returns the union data inside the PushplusNotificationSettings_SpaceMessageType as a PushplusNotificationSettingsSpaceMessageType2
func (t PushplusNotificationSettings_SpaceMessageType) AsPushplusNotificationSettingsSpaceMessageType2() (PushplusNotificationSettingsSpaceMessageType2, error) {
	var body PushplusNotificationSettingsSpaceMessageType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPushplusNotificationSettingsSpaceMessageType2 overwrites any union data inside the PushplusNotificationSettings_SpaceMessageType as the provided PushplusNotificationSettingsSpaceMessageType2
func (t *PushplusNotificationSettings_SpaceMessageType) FromPushplusNotificationSettingsSpaceMessageType2(v PushplusNotificationSettingsSpaceMessageType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePushplusNotificationSettingsSpaceMessageType2 performs a merge with any union data inside the PushplusNotificationSettings_SpaceMessageType, using the provided PushplusNotificationSettingsSpaceMessageType2
func (t *PushplusNotificationSettings_SpaceMessageType) MergePushplusNotificationSettingsSpaceMessageType2(v PushplusNotificationSettingsSpaceMessageType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PushplusNotificationSettings_SpaceMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PushplusNotificationSettings_SpaceMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTelegramNotificationSettingsBeganMessageType0 returns the union data inside the TelegramNotificationSettings_BeganMessageType as a TelegramNotificationSettingsBeganMessageType0
func (t TelegramNotificationSettings_BeganMessageType) AsTelegramNotificationSettingsBeganMessageType0() (TelegramNotificationSettingsBeganMessageType0, error) {
	var body TelegramNotificationSettingsBeganMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTelegramNotificationSettingsBeganMessageType0 overwrites any union data inside the TelegramNotificationSettings_BeganMessageType as the provided TelegramNotificationSettingsBeganMessageType0
func (t *TelegramNotificationSettings_BeganMessageType) FromTelegramNotificationSettingsBeganMessageType0(v TelegramNotificationSettingsBeganMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTelegramNotificationSettingsBeganMessageType0 performs a merge with any union data inside the TelegramNotificationSettings_BeganMessageType, using the provided TelegramNotificationSettingsBeganMessageType0
func (t *TelegramNotificationSettings_BeganMessageType) MergeTelegramNotificationSettingsBeganMessageType0(v TelegramNotificationSettingsBeganMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTelegramNotificationSettingsBeganMessageType1 returns the union data inside the TelegramNotificationSettings_BeganMessageType as a TelegramNotificationSettingsBeganMessageType1
func (t TelegramNotificationSettings_BeganMessageType) AsTelegramNotificationSettingsBeganMessageType1() (TelegramNotificationSettingsBeganMessageType1, error) {
	var body TelegramNotificationSettingsBeganMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTelegramNotificationSettingsBeganMessageType1 overwrites any union data inside the TelegramNotificationSettings_BeganMessageType as the provided TelegramNotificationSettingsBeganMessageType1
func (t *TelegramNotificationSettings_BeganMessageType) FromTelegramNotificationSettingsBeganMessageType1(v TelegramNotificationSettingsBeganMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTelegramNotificationSettingsBeganMessageType1 performs a merge with any union data inside the TelegramNotificationSettings_BeganMessageType, using the provided TelegramNotificationSettingsBeganMessageType1
func (t *TelegramNotificationSettings_BeganMessageType) MergeTelegramNotificationSettingsBeganMessageType1(v TelegramNotificationSettingsBeganMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TelegramNotificationSettings_BeganMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TelegramNotificationSettings_BeganMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTelegramNotificationSettingsEndedMessageType0 returns the union data inside the TelegramNotificationSettings_EndedMessageType as a TelegramNotificationSettingsEndedMessageType0
func (t TelegramNotificationSettings_EndedMessageType) AsTelegramNotificationSettingsEndedMessageType0() (TelegramNotificationSettingsEndedMessageType0, error) {
	var body TelegramNotificationSettingsEndedMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTelegramNotificationSettingsEndedMessageType0 overwrites any union data inside the TelegramNotificationSettings_EndedMessageType as the provided TelegramNotificationSettingsEndedMessageType0
func (t *TelegramNotificationSettings_EndedMessageType) FromTelegramNotificationSettingsEndedMessageType0(v TelegramNotificationSettingsEndedMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTelegramNotificationSettingsEndedMessageType0 performs a merge with any union data inside the TelegramNotificationSettings_EndedMessageType, using the provided TelegramNotificationSettingsEndedMessageType0
func (t *TelegramNotificationSettings_EndedMessageType) MergeTelegramNotificationSettingsEndedMessageType0(v TelegramNotificationSettingsEndedMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTelegramNotificationSettingsEndedMessageType1 returns the union data inside the TelegramNotificationSettings_EndedMessageType as a TelegramNotificationSettingsEndedMessageType1
func (t TelegramNotificationSettings_EndedMessageType) AsTelegramNotificationSettingsEndedMessageType1() (TelegramNotificationSettingsEndedMessageType1, error) {
	var body TelegramNotificationSettingsEndedMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTelegramNotificationSettingsEndedMessageType1 overwrites any union data inside the TelegramNotificationSettings_EndedMessageType as the provided TelegramNotificationSettingsEndedMessageType1
func (t *TelegramNotificationSettings_EndedMessageType) FromTelegramNotificationSettingsEndedMessageType1(v TelegramNotificationSettingsEndedMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTelegramNotificationSettingsEndedMessageType1 performs a merge with any union data inside the TelegramNotificationSettings_EndedMessageType, using the provided TelegramNotificationSettingsEndedMessageType1
func (t *TelegramNotificationSettings_EndedMessageType) MergeTelegramNotificationSettingsEndedMessageType1(v TelegramNotificationSettingsEndedMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TelegramNotificationSettings_EndedMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TelegramNotificationSettings_EndedMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTelegramNotificationSettingsErrorMessageType0 returns the union data inside the TelegramNotificationSettings_ErrorMessageType as a TelegramNotificationSettingsErrorMessageType0
func (t TelegramNotificationSettings_ErrorMessageType) AsTelegramNotificationSettingsErrorMessageType0() (TelegramNotificationSettingsErrorMessageType0, error) {
	var body TelegramNotificationSettingsErrorMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTelegramNotificationSettingsErrorMessageType0 overwrites any union data inside the TelegramNotificationSettings_ErrorMessageType as the provided TelegramNotificationSettingsErrorMessageType0
func (t *TelegramNotificationSettings_ErrorMessageType) FromTelegramNotificationSettingsErrorMessageType0(v TelegramNotificationSettingsErrorMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTelegramNotificationSettingsErrorMessageType0 performs a merge with any union data inside the TelegramNotificationSettings_ErrorMessageType, using the provided TelegramNotificationSettingsErrorMessageType0
func (t *TelegramNotificationSettings_ErrorMessageType) MergeTelegramNotificationSettingsErrorMessageType0(v TelegramNotificationSettingsErrorMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTelegramNotificationSettingsErrorMessageType1 returns the union data inside the TelegramNotificationSettings_ErrorMessageType as a TelegramNotificationSettingsErrorMessageType1
func (t TelegramNotificationSettings_ErrorMessageType) AsTelegramNotificationSettingsErrorMessageType1() (TelegramNotificationSettingsErrorMessageType1, error) {
	var body TelegramNotificationSettingsErrorMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTelegramNotificationSettingsErrorMessageType1 overwrites any union data inside the TelegramNotificationSettings_ErrorMessageType as the provided TelegramNotificationSettingsErrorMessageType1
func (t *TelegramNotificationSettings_ErrorMessageType) FromTelegramNotificationSettingsErrorMessageType1(v TelegramNotificationSettingsErrorMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTelegramNotificationSettingsErrorMessageType1 performs a merge with any union data inside the TelegramNotificationSettings_ErrorMessageType, using the provided TelegramNotificationSettingsErrorMessageType1
func (t *TelegramNotificationSettings_ErrorMessageType) MergeTelegramNotificationSettingsErrorMessageType1(v TelegramNotificationSettingsErrorMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TelegramNotificationSettings_ErrorMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TelegramNotificationSettings_ErrorMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTelegramNotificationSettingsSpaceMessageType0 returns the union data inside the TelegramNotificationSettings_SpaceMessageType as a TelegramNotificationSettingsSpaceMessageType0
func (t TelegramNotificationSettings_SpaceMessageType) AsTelegramNotificationSettingsSpaceMessageType0() (TelegramNotificationSettingsSpaceMessageType0, error) {
	var body TelegramNotificationSettingsSpaceMessageType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTelegramNotificationSettingsSpaceMessageType0 overwrites any union data inside the TelegramNotificationSettings_SpaceMessageType as the provided TelegramNotificationSettingsSpaceMessageType0
func (t *TelegramNotificationSettings_SpaceMessageType) FromTelegramNotificationSettingsSpaceMessageType0(v TelegramNotificationSettingsSpaceMessageType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTelegramNotificationSettingsSpaceMessageType0 performs a merge with any union data inside the TelegramNotificationSettings_SpaceMessageType, using the provided TelegramNotificationSettingsSpaceMessageType0
func (t *TelegramNotificationSettings_SpaceMessageType) MergeTelegramNotificationSettingsSpaceMessageType0(v TelegramNotificationSettingsSpaceMessageType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTelegramNotificationSettingsSpaceMessageType1 returns the union data inside the TelegramNotificationSettings_SpaceMessageType as a TelegramNotificationSettingsSpaceMessageType1
func (t TelegramNotificationSettings_SpaceMessageType) AsTelegramNotificationSettingsSpaceMessageType1() (TelegramNotificationSettingsSpaceMessageType1, error) {
	var body TelegramNotificationSettingsSpaceMessageType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTelegramNotificationSettingsSpaceMessageType1 overwrites any union data inside the TelegramNotificationSettings_SpaceMessageType as the provided TelegramNotificationSettingsSpaceMessageType1
func (t *TelegramNotificationSettings_SpaceMessageType) FromTelegramNotificationSettingsSpaceMessageType1(v TelegramNotificationSettingsSpaceMessageType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTelegramNotificationSettingsSpaceMessageType1 performs a merge with any union data inside the TelegramNotificationSettings_SpaceMessageType, using the provided TelegramNotificationSettingsSpaceMessageType1
func (t *TelegramNotificationSettings_SpaceMessageType) MergeTelegramNotificationSettingsSpaceMessageType1(v TelegramNotificationSettingsSpaceMessageType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TelegramNotificationSettings_SpaceMessageType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TelegramNotificationSettings_SpaceMessageType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ExitAppApiV1AppExitPost request
	ExitAppApiV1AppExitPost(ctx context.Context, params *ExitAppApiV1AppExitPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppInfoApiV1AppInfoGet request
	GetAppInfoApiV1AppInfoGet(ctx context.Context, params *GetAppInfoApiV1AppInfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartAppApiV1AppRestartPost request
	RestartAppApiV1AppRestartPost(ctx context.Context, params *RestartAppApiV1AppRestartPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppStatusApiV1AppStatusGet request
	GetAppStatusApiV1AppStatusGet(ctx context.Context, params *GetAppStatusApiV1AppStatusGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsApiV1SettingsGet request
	GetSettingsApiV1SettingsGet(ctx context.Context, params *GetSettingsApiV1SettingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeSettingsApiV1SettingsPatchWithBody request with any body
	ChangeSettingsApiV1SettingsPatchWithBody(ctx context.Context, params *ChangeSettingsApiV1SettingsPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangeSettingsApiV1SettingsPatch(ctx context.Context, params *ChangeSettingsApiV1SettingsPatchParams, body ChangeSettingsApiV1SettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskOptionsApiV1SettingsTasksRoomIdGet request
	GetTaskOptionsApiV1SettingsTasksRoomIdGet(ctx context.Context, roomId int, params *GetTaskOptionsApiV1SettingsTasksRoomIdGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchWithBody request with any body
	ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchWithBody(ctx context.Context, roomId int, params *ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangeTaskOptionsApiV1SettingsTasksRoomIdPatch(ctx context.Context, roomId int, params *ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams, body ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveAllTasksApiV1TasksDelete request
	RemoveAllTasksApiV1TasksDelete(ctx context.Context, params *RemoveAllTasksApiV1TasksDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskDataApiV1TasksDataGet request
	GetTaskDataApiV1TasksDataGet(ctx context.Context, params *GetTaskDataApiV1TasksDataGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAllTaskInfosApiV1TasksInfoPost request
	UpdateAllTaskInfosApiV1TasksInfoPost(ctx context.Context, params *UpdateAllTaskInfosApiV1TasksInfoPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisableAllTaskRecordersApiV1TasksRecorderDisablePostWithBody request with any body
	DisableAllTaskRecordersApiV1TasksRecorderDisablePostWithBody(ctx context.Context, params *DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DisableAllTaskRecordersApiV1TasksRecorderDisablePost(ctx context.Context, params *DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams, body DisableAllTaskRecordersApiV1TasksRecorderDisablePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableAllTaskRecordersApiV1TasksRecorderEnablePost request
	EnableAllTaskRecordersApiV1TasksRecorderEnablePost(ctx context.Context, params *EnableAllTaskRecordersApiV1TasksRecorderEnablePostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartAllTasksApiV1TasksStartPost request
	StartAllTasksApiV1TasksStartPost(ctx context.Context, params *StartAllTasksApiV1TasksStartPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopAllTasksApiV1TasksStopPostWithBody request with any body
	StopAllTasksApiV1TasksStopPostWithBody(ctx context.Context, params *StopAllTasksApiV1TasksStopPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StopAllTasksApiV1TasksStopPost(ctx context.Context, params *StopAllTasksApiV1TasksStopPostParams, body StopAllTasksApiV1TasksStopPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveTaskApiV1TasksRoomIdDelete request
	RemoveTaskApiV1TasksRoomIdDelete(ctx context.Context, roomId int, params *RemoveTaskApiV1TasksRoomIdDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTaskApiV1TasksRoomIdPost request
	AddTaskApiV1TasksRoomIdPost(ctx context.Context, roomId int, params *AddTaskApiV1TasksRoomIdPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CanCutStreamApiV1TasksRoomIdCutGet request
	CanCutStreamApiV1TasksRoomIdCutGet(ctx context.Context, roomId int, params *CanCutStreamApiV1TasksRoomIdCutGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CutStreamApiV1TasksRoomIdCutPost request
	CutStreamApiV1TasksRoomIdCutPost(ctx context.Context, roomId int, params *CutStreamApiV1TasksRoomIdCutPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGet request
	GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGet(ctx context.Context, roomId int, params *GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOneTaskDataApiV1TasksRoomIdDataGet request
	GetOneTaskDataApiV1TasksRoomIdDataGet(ctx context.Context, roomId int, params *GetOneTaskDataApiV1TasksRoomIdDataGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTaskInfoApiV1TasksRoomIdInfoPost request
	UpdateTaskInfoApiV1TasksRoomIdInfoPost(ctx context.Context, roomId int, params *UpdateTaskInfoApiV1TasksRoomIdInfoPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskMetadataApiV1TasksRoomIdMetadataGet request
	GetTaskMetadataApiV1TasksRoomIdMetadataGet(ctx context.Context, roomId int, params *GetTaskMetadataApiV1TasksRoomIdMetadataGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskParamApiV1TasksRoomIdParamGet request
	GetTaskParamApiV1TasksRoomIdParamGet(ctx context.Context, roomId int, params *GetTaskParamApiV1TasksRoomIdParamGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskStreamProfileApiV1TasksRoomIdProfileGet request
	GetTaskStreamProfileApiV1TasksRoomIdProfileGet(ctx context.Context, roomId int, params *GetTaskStreamProfileApiV1TasksRoomIdProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostWithBody request with any body
	DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostWithBody(ctx context.Context, roomId int, params *DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePost(ctx context.Context, roomId int, params *DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams, body DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePost request
	EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePost(ctx context.Context, roomId int, params *EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartTaskApiV1TasksRoomIdStartPost request
	StartTaskApiV1TasksRoomIdStartPost(ctx context.Context, roomId int, params *StartTaskApiV1TasksRoomIdStartPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopTaskApiV1TasksRoomIdStopPostWithBody request with any body
	StopTaskApiV1TasksRoomIdStopPostWithBody(ctx context.Context, roomId int, params *StopTaskApiV1TasksRoomIdStopPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StopTaskApiV1TasksRoomIdStopPost(ctx context.Context, roomId int, params *StopTaskApiV1TasksRoomIdStopPostParams, body StopTaskApiV1TasksRoomIdStopPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGet request
	GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGet(ctx context.Context, roomId int, params *GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestVersionApiV1UpdateVersionLatestGet request
	GetLatestVersionApiV1UpdateVersionLatestGet(ctx context.Context, params *GetLatestVersionApiV1UpdateVersionLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateCookieApiV1ValidationCookiePostWithBody request with any body
	ValidateCookieApiV1ValidationCookiePostWithBody(ctx context.Context, params *ValidateCookieApiV1ValidationCookiePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateCookieApiV1ValidationCookiePost(ctx context.Context, params *ValidateCookieApiV1ValidationCookiePostParams, body ValidateCookieApiV1ValidationCookiePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateDirApiV1ValidationDirPostWithBody request with any body
	ValidateDirApiV1ValidationDirPostWithBody(ctx context.Context, params *ValidateDirApiV1ValidationDirPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateDirApiV1ValidationDirPost(ctx context.Context, params *ValidateDirApiV1ValidationDirPostParams, body ValidateDirApiV1ValidationDirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ExitAppApiV1AppExitPost(ctx context.Context, params *ExitAppApiV1AppExitPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExitAppApiV1AppExitPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppInfoApiV1AppInfoGet(ctx context.Context, params *GetAppInfoApiV1AppInfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppInfoApiV1AppInfoGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartAppApiV1AppRestartPost(ctx context.Context, params *RestartAppApiV1AppRestartPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartAppApiV1AppRestartPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppStatusApiV1AppStatusGet(ctx context.Context, params *GetAppStatusApiV1AppStatusGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppStatusApiV1AppStatusGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsApiV1SettingsGet(ctx context.Context, params *GetSettingsApiV1SettingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsApiV1SettingsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeSettingsApiV1SettingsPatchWithBody(ctx context.Context, params *ChangeSettingsApiV1SettingsPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeSettingsApiV1SettingsPatchRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeSettingsApiV1SettingsPatch(ctx context.Context, params *ChangeSettingsApiV1SettingsPatchParams, body ChangeSettingsApiV1SettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeSettingsApiV1SettingsPatchRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskOptionsApiV1SettingsTasksRoomIdGet(ctx context.Context, roomId int, params *GetTaskOptionsApiV1SettingsTasksRoomIdGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskOptionsApiV1SettingsTasksRoomIdGetRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchWithBody(ctx context.Context, roomId int, params *ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeTaskOptionsApiV1SettingsTasksRoomIdPatchRequestWithBody(c.Server, roomId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeTaskOptionsApiV1SettingsTasksRoomIdPatch(ctx context.Context, roomId int, params *ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams, body ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeTaskOptionsApiV1SettingsTasksRoomIdPatchRequest(c.Server, roomId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAllTasksApiV1TasksDelete(ctx context.Context, params *RemoveAllTasksApiV1TasksDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAllTasksApiV1TasksDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskDataApiV1TasksDataGet(ctx context.Context, params *GetTaskDataApiV1TasksDataGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskDataApiV1TasksDataGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAllTaskInfosApiV1TasksInfoPost(ctx context.Context, params *UpdateAllTaskInfosApiV1TasksInfoPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAllTaskInfosApiV1TasksInfoPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableAllTaskRecordersApiV1TasksRecorderDisablePostWithBody(ctx context.Context, params *DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableAllTaskRecordersApiV1TasksRecorderDisablePostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableAllTaskRecordersApiV1TasksRecorderDisablePost(ctx context.Context, params *DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams, body DisableAllTaskRecordersApiV1TasksRecorderDisablePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableAllTaskRecordersApiV1TasksRecorderDisablePostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableAllTaskRecordersApiV1TasksRecorderEnablePost(ctx context.Context, params *EnableAllTaskRecordersApiV1TasksRecorderEnablePostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableAllTaskRecordersApiV1TasksRecorderEnablePostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartAllTasksApiV1TasksStartPost(ctx context.Context, params *StartAllTasksApiV1TasksStartPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartAllTasksApiV1TasksStartPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopAllTasksApiV1TasksStopPostWithBody(ctx context.Context, params *StopAllTasksApiV1TasksStopPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopAllTasksApiV1TasksStopPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopAllTasksApiV1TasksStopPost(ctx context.Context, params *StopAllTasksApiV1TasksStopPostParams, body StopAllTasksApiV1TasksStopPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopAllTasksApiV1TasksStopPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveTaskApiV1TasksRoomIdDelete(ctx context.Context, roomId int, params *RemoveTaskApiV1TasksRoomIdDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveTaskApiV1TasksRoomIdDeleteRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTaskApiV1TasksRoomIdPost(ctx context.Context, roomId int, params *AddTaskApiV1TasksRoomIdPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTaskApiV1TasksRoomIdPostRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CanCutStreamApiV1TasksRoomIdCutGet(ctx context.Context, roomId int, params *CanCutStreamApiV1TasksRoomIdCutGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCanCutStreamApiV1TasksRoomIdCutGetRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CutStreamApiV1TasksRoomIdCutPost(ctx context.Context, roomId int, params *CutStreamApiV1TasksRoomIdCutPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCutStreamApiV1TasksRoomIdCutPostRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGet(ctx context.Context, roomId int, params *GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOneTaskDataApiV1TasksRoomIdDataGet(ctx context.Context, roomId int, params *GetOneTaskDataApiV1TasksRoomIdDataGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOneTaskDataApiV1TasksRoomIdDataGetRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTaskInfoApiV1TasksRoomIdInfoPost(ctx context.Context, roomId int, params *UpdateTaskInfoApiV1TasksRoomIdInfoPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTaskInfoApiV1TasksRoomIdInfoPostRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskMetadataApiV1TasksRoomIdMetadataGet(ctx context.Context, roomId int, params *GetTaskMetadataApiV1TasksRoomIdMetadataGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskMetadataApiV1TasksRoomIdMetadataGetRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskParamApiV1TasksRoomIdParamGet(ctx context.Context, roomId int, params *GetTaskParamApiV1TasksRoomIdParamGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskParamApiV1TasksRoomIdParamGetRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskStreamProfileApiV1TasksRoomIdProfileGet(ctx context.Context, roomId int, params *GetTaskStreamProfileApiV1TasksRoomIdProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskStreamProfileApiV1TasksRoomIdProfileGetRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostWithBody(ctx context.Context, roomId int, params *DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostRequestWithBody(c.Server, roomId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePost(ctx context.Context, roomId int, params *DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams, body DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostRequest(c.Server, roomId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePost(ctx context.Context, roomId int, params *EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartTaskApiV1TasksRoomIdStartPost(ctx context.Context, roomId int, params *StartTaskApiV1TasksRoomIdStartPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartTaskApiV1TasksRoomIdStartPostRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopTaskApiV1TasksRoomIdStopPostWithBody(ctx context.Context, roomId int, params *StopTaskApiV1TasksRoomIdStopPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopTaskApiV1TasksRoomIdStopPostRequestWithBody(c.Server, roomId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopTaskApiV1TasksRoomIdStopPost(ctx context.Context, roomId int, params *StopTaskApiV1TasksRoomIdStopPostParams, body StopTaskApiV1TasksRoomIdStopPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopTaskApiV1TasksRoomIdStopPostRequest(c.Server, roomId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGet(ctx context.Context, roomId int, params *GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetRequest(c.Server, roomId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestVersionApiV1UpdateVersionLatestGet(ctx context.Context, params *GetLatestVersionApiV1UpdateVersionLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestVersionApiV1UpdateVersionLatestGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateCookieApiV1ValidationCookiePostWithBody(ctx context.Context, params *ValidateCookieApiV1ValidationCookiePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateCookieApiV1ValidationCookiePostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateCookieApiV1ValidationCookiePost(ctx context.Context, params *ValidateCookieApiV1ValidationCookiePostParams, body ValidateCookieApiV1ValidationCookiePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateCookieApiV1ValidationCookiePostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateDirApiV1ValidationDirPostWithBody(ctx context.Context, params *ValidateDirApiV1ValidationDirPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateDirApiV1ValidationDirPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateDirApiV1ValidationDirPost(ctx context.Context, params *ValidateDirApiV1ValidationDirPostParams, body ValidateDirApiV1ValidationDirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateDirApiV1ValidationDirPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewExitAppApiV1AppExitPostRequest generates requests for ExitAppApiV1AppExitPost
func NewExitAppApiV1AppExitPostRequest(server string, params *ExitAppApiV1AppExitPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/app/exit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetAppInfoApiV1AppInfoGetRequest generates requests for GetAppInfoApiV1AppInfoGet
func NewGetAppInfoApiV1AppInfoGetRequest(server string, params *GetAppInfoApiV1AppInfoGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/app/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewRestartAppApiV1AppRestartPostRequest generates requests for RestartAppApiV1AppRestartPost
func NewRestartAppApiV1AppRestartPostRequest(server string, params *RestartAppApiV1AppRestartPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/app/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetAppStatusApiV1AppStatusGetRequest generates requests for GetAppStatusApiV1AppStatusGet
func NewGetAppStatusApiV1AppStatusGetRequest(server string, params *GetAppStatusApiV1AppStatusGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/app/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetSettingsApiV1SettingsGetRequest generates requests for GetSettingsApiV1SettingsGet
func NewGetSettingsApiV1SettingsGetRequest(server string, params *GetSettingsApiV1SettingsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exclude != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude", runtime.ParamLocationQuery, *params.Exclude); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewChangeSettingsApiV1SettingsPatchRequest calls the generic ChangeSettingsApiV1SettingsPatch builder with application/json body
func NewChangeSettingsApiV1SettingsPatchRequest(server string, params *ChangeSettingsApiV1SettingsPatchParams, body ChangeSettingsApiV1SettingsPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangeSettingsApiV1SettingsPatchRequestWithBody(server, params, "application/json", bodyReader)
}

// NewChangeSettingsApiV1SettingsPatchRequestWithBody generates requests for ChangeSettingsApiV1SettingsPatch with any type of body
func NewChangeSettingsApiV1SettingsPatchRequestWithBody(server string, params *ChangeSettingsApiV1SettingsPatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetTaskOptionsApiV1SettingsTasksRoomIdGetRequest generates requests for GetTaskOptionsApiV1SettingsTasksRoomIdGet
func NewGetTaskOptionsApiV1SettingsTasksRoomIdGetRequest(server string, roomId int, params *GetTaskOptionsApiV1SettingsTasksRoomIdGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewChangeTaskOptionsApiV1SettingsTasksRoomIdPatchRequest calls the generic ChangeTaskOptionsApiV1SettingsTasksRoomIdPatch builder with application/json body
func NewChangeTaskOptionsApiV1SettingsTasksRoomIdPatchRequest(server string, roomId int, params *ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams, body ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangeTaskOptionsApiV1SettingsTasksRoomIdPatchRequestWithBody(server, roomId, params, "application/json", bodyReader)
}

// NewChangeTaskOptionsApiV1SettingsTasksRoomIdPatchRequestWithBody generates requests for ChangeTaskOptionsApiV1SettingsTasksRoomIdPatch with any type of body
func NewChangeTaskOptionsApiV1SettingsTasksRoomIdPatchRequestWithBody(server string, roomId int, params *ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewRemoveAllTasksApiV1TasksDeleteRequest generates requests for RemoveAllTasksApiV1TasksDelete
func NewRemoveAllTasksApiV1TasksDeleteRequest(server string, params *RemoveAllTasksApiV1TasksDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetTaskDataApiV1TasksDataGetRequest generates requests for GetTaskDataApiV1TasksDataGet
func NewGetTaskDataApiV1TasksDataGetRequest(server string, params *GetTaskDataApiV1TasksDataGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewUpdateAllTaskInfosApiV1TasksInfoPostRequest generates requests for UpdateAllTaskInfosApiV1TasksInfoPost
func NewUpdateAllTaskInfosApiV1TasksInfoPostRequest(server string, params *UpdateAllTaskInfosApiV1TasksInfoPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewDisableAllTaskRecordersApiV1TasksRecorderDisablePostRequest calls the generic DisableAllTaskRecordersApiV1TasksRecorderDisablePost builder with application/json body
func NewDisableAllTaskRecordersApiV1TasksRecorderDisablePostRequest(server string, params *DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams, body DisableAllTaskRecordersApiV1TasksRecorderDisablePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDisableAllTaskRecordersApiV1TasksRecorderDisablePostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDisableAllTaskRecordersApiV1TasksRecorderDisablePostRequestWithBody generates requests for DisableAllTaskRecordersApiV1TasksRecorderDisablePost with any type of body
func NewDisableAllTaskRecordersApiV1TasksRecorderDisablePostRequestWithBody(server string, params *DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/recorder/disable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewEnableAllTaskRecordersApiV1TasksRecorderEnablePostRequest generates requests for EnableAllTaskRecordersApiV1TasksRecorderEnablePost
func NewEnableAllTaskRecordersApiV1TasksRecorderEnablePostRequest(server string, params *EnableAllTaskRecordersApiV1TasksRecorderEnablePostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/recorder/enable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewStartAllTasksApiV1TasksStartPostRequest generates requests for StartAllTasksApiV1TasksStartPost
func NewStartAllTasksApiV1TasksStartPostRequest(server string, params *StartAllTasksApiV1TasksStartPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewStopAllTasksApiV1TasksStopPostRequest calls the generic StopAllTasksApiV1TasksStopPost builder with application/json body
func NewStopAllTasksApiV1TasksStopPostRequest(server string, params *StopAllTasksApiV1TasksStopPostParams, body StopAllTasksApiV1TasksStopPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStopAllTasksApiV1TasksStopPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewStopAllTasksApiV1TasksStopPostRequestWithBody generates requests for StopAllTasksApiV1TasksStopPost with any type of body
func NewStopAllTasksApiV1TasksStopPostRequestWithBody(server string, params *StopAllTasksApiV1TasksStopPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewRemoveTaskApiV1TasksRoomIdDeleteRequest generates requests for RemoveTaskApiV1TasksRoomIdDelete
func NewRemoveTaskApiV1TasksRoomIdDeleteRequest(server string, roomId int, params *RemoveTaskApiV1TasksRoomIdDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewAddTaskApiV1TasksRoomIdPostRequest generates requests for AddTaskApiV1TasksRoomIdPost
func NewAddTaskApiV1TasksRoomIdPostRequest(server string, roomId int, params *AddTaskApiV1TasksRoomIdPostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewCanCutStreamApiV1TasksRoomIdCutGetRequest generates requests for CanCutStreamApiV1TasksRoomIdCutGet
func NewCanCutStreamApiV1TasksRoomIdCutGetRequest(server string, roomId int, params *CanCutStreamApiV1TasksRoomIdCutGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/cut", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewCutStreamApiV1TasksRoomIdCutPostRequest generates requests for CutStreamApiV1TasksRoomIdCutPost
func NewCutStreamApiV1TasksRoomIdCutPostRequest(server string, roomId int, params *CutStreamApiV1TasksRoomIdCutPostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/cut", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetRequest generates requests for GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGet
func NewGetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetRequest(server string, roomId int, params *GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/danmakus", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetOneTaskDataApiV1TasksRoomIdDataGetRequest generates requests for GetOneTaskDataApiV1TasksRoomIdDataGet
func NewGetOneTaskDataApiV1TasksRoomIdDataGetRequest(server string, roomId int, params *GetOneTaskDataApiV1TasksRoomIdDataGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewUpdateTaskInfoApiV1TasksRoomIdInfoPostRequest generates requests for UpdateTaskInfoApiV1TasksRoomIdInfoPost
func NewUpdateTaskInfoApiV1TasksRoomIdInfoPostRequest(server string, roomId int, params *UpdateTaskInfoApiV1TasksRoomIdInfoPostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetTaskMetadataApiV1TasksRoomIdMetadataGetRequest generates requests for GetTaskMetadataApiV1TasksRoomIdMetadataGet
func NewGetTaskMetadataApiV1TasksRoomIdMetadataGetRequest(server string, roomId int, params *GetTaskMetadataApiV1TasksRoomIdMetadataGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetTaskParamApiV1TasksRoomIdParamGetRequest generates requests for GetTaskParamApiV1TasksRoomIdParamGet
func NewGetTaskParamApiV1TasksRoomIdParamGetRequest(server string, roomId int, params *GetTaskParamApiV1TasksRoomIdParamGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/param", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetTaskStreamProfileApiV1TasksRoomIdProfileGetRequest generates requests for GetTaskStreamProfileApiV1TasksRoomIdProfileGet
func NewGetTaskStreamProfileApiV1TasksRoomIdProfileGetRequest(server string, roomId int, params *GetTaskStreamProfileApiV1TasksRoomIdProfileGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostRequest calls the generic DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePost builder with application/json body
func NewDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostRequest(server string, roomId int, params *DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams, body DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostRequestWithBody(server, roomId, params, "application/json", bodyReader)
}

// NewDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostRequestWithBody generates requests for DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePost with any type of body
func NewDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostRequestWithBody(server string, roomId int, params *DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/recorder/disable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewEnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostRequest generates requests for EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePost
func NewEnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostRequest(server string, roomId int, params *EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/recorder/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewStartTaskApiV1TasksRoomIdStartPostRequest generates requests for StartTaskApiV1TasksRoomIdStartPost
func NewStartTaskApiV1TasksRoomIdStartPostRequest(server string, roomId int, params *StartTaskApiV1TasksRoomIdStartPostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewStopTaskApiV1TasksRoomIdStopPostRequest calls the generic StopTaskApiV1TasksRoomIdStopPost builder with application/json body
func NewStopTaskApiV1TasksRoomIdStopPostRequest(server string, roomId int, params *StopTaskApiV1TasksRoomIdStopPostParams, body StopTaskApiV1TasksRoomIdStopPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStopTaskApiV1TasksRoomIdStopPostRequestWithBody(server, roomId, params, "application/json", bodyReader)
}

// NewStopTaskApiV1TasksRoomIdStopPostRequestWithBody generates requests for StopTaskApiV1TasksRoomIdStopPost with any type of body
func NewStopTaskApiV1TasksRoomIdStopPostRequestWithBody(server string, roomId int, params *StopTaskApiV1TasksRoomIdStopPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetRequest generates requests for GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGet
func NewGetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetRequest(server string, roomId int, params *GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "room_id", runtime.ParamLocationPath, roomId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/videos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetLatestVersionApiV1UpdateVersionLatestGetRequest generates requests for GetLatestVersionApiV1UpdateVersionLatestGet
func NewGetLatestVersionApiV1UpdateVersionLatestGetRequest(server string, params *GetLatestVersionApiV1UpdateVersionLatestGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/update/version/latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewValidateCookieApiV1ValidationCookiePostRequest calls the generic ValidateCookieApiV1ValidationCookiePost builder with application/json body
func NewValidateCookieApiV1ValidationCookiePostRequest(server string, params *ValidateCookieApiV1ValidationCookiePostParams, body ValidateCookieApiV1ValidationCookiePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateCookieApiV1ValidationCookiePostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewValidateCookieApiV1ValidationCookiePostRequestWithBody generates requests for ValidateCookieApiV1ValidationCookiePost with any type of body
func NewValidateCookieApiV1ValidationCookiePostRequestWithBody(server string, params *ValidateCookieApiV1ValidationCookiePostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/validation/cookie")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewValidateDirApiV1ValidationDirPostRequest calls the generic ValidateDirApiV1ValidationDirPost builder with application/json body
func NewValidateDirApiV1ValidationDirPostRequest(server string, params *ValidateDirApiV1ValidationDirPostParams, body ValidateDirApiV1ValidationDirPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateDirApiV1ValidationDirPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewValidateDirApiV1ValidationDirPostRequestWithBody generates requests for ValidateDirApiV1ValidationDirPost with any type of body
func NewValidateDirApiV1ValidationDirPostRequestWithBody(server string, params *ValidateDirApiV1ValidationDirPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/validation/dir")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ExitAppApiV1AppExitPostWithResponse request
	ExitAppApiV1AppExitPostWithResponse(ctx context.Context, params *ExitAppApiV1AppExitPostParams, reqEditors ...RequestEditorFn) (*ExitAppApiV1AppExitPostResponse, error)

	// GetAppInfoApiV1AppInfoGetWithResponse request
	GetAppInfoApiV1AppInfoGetWithResponse(ctx context.Context, params *GetAppInfoApiV1AppInfoGetParams, reqEditors ...RequestEditorFn) (*GetAppInfoApiV1AppInfoGetResponse, error)

	// RestartAppApiV1AppRestartPostWithResponse request
	RestartAppApiV1AppRestartPostWithResponse(ctx context.Context, params *RestartAppApiV1AppRestartPostParams, reqEditors ...RequestEditorFn) (*RestartAppApiV1AppRestartPostResponse, error)

	// GetAppStatusApiV1AppStatusGetWithResponse request
	GetAppStatusApiV1AppStatusGetWithResponse(ctx context.Context, params *GetAppStatusApiV1AppStatusGetParams, reqEditors ...RequestEditorFn) (*GetAppStatusApiV1AppStatusGetResponse, error)

	// GetSettingsApiV1SettingsGetWithResponse request
	GetSettingsApiV1SettingsGetWithResponse(ctx context.Context, params *GetSettingsApiV1SettingsGetParams, reqEditors ...RequestEditorFn) (*GetSettingsApiV1SettingsGetResponse, error)

	// ChangeSettingsApiV1SettingsPatchWithBodyWithResponse request with any body
	ChangeSettingsApiV1SettingsPatchWithBodyWithResponse(ctx context.Context, params *ChangeSettingsApiV1SettingsPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeSettingsApiV1SettingsPatchResponse, error)

	ChangeSettingsApiV1SettingsPatchWithResponse(ctx context.Context, params *ChangeSettingsApiV1SettingsPatchParams, body ChangeSettingsApiV1SettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeSettingsApiV1SettingsPatchResponse, error)

	// GetTaskOptionsApiV1SettingsTasksRoomIdGetWithResponse request
	GetTaskOptionsApiV1SettingsTasksRoomIdGetWithResponse(ctx context.Context, roomId int, params *GetTaskOptionsApiV1SettingsTasksRoomIdGetParams, reqEditors ...RequestEditorFn) (*GetTaskOptionsApiV1SettingsTasksRoomIdGetResponse, error)

	// ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchWithBodyWithResponse request with any body
	ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchWithBodyWithResponse(ctx context.Context, roomId int, params *ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse, error)

	ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchWithResponse(ctx context.Context, roomId int, params *ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams, body ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse, error)

	// RemoveAllTasksApiV1TasksDeleteWithResponse request
	RemoveAllTasksApiV1TasksDeleteWithResponse(ctx context.Context, params *RemoveAllTasksApiV1TasksDeleteParams, reqEditors ...RequestEditorFn) (*RemoveAllTasksApiV1TasksDeleteResponse, error)

	// GetTaskDataApiV1TasksDataGetWithResponse request
	GetTaskDataApiV1TasksDataGetWithResponse(ctx context.Context, params *GetTaskDataApiV1TasksDataGetParams, reqEditors ...RequestEditorFn) (*GetTaskDataApiV1TasksDataGetResponse, error)

	// UpdateAllTaskInfosApiV1TasksInfoPostWithResponse request
	UpdateAllTaskInfosApiV1TasksInfoPostWithResponse(ctx context.Context, params *UpdateAllTaskInfosApiV1TasksInfoPostParams, reqEditors ...RequestEditorFn) (*UpdateAllTaskInfosApiV1TasksInfoPostResponse, error)

	// DisableAllTaskRecordersApiV1TasksRecorderDisablePostWithBodyWithResponse request with any body
	DisableAllTaskRecordersApiV1TasksRecorderDisablePostWithBodyWithResponse(ctx context.Context, params *DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse, error)

	DisableAllTaskRecordersApiV1TasksRecorderDisablePostWithResponse(ctx context.Context, params *DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams, body DisableAllTaskRecordersApiV1TasksRecorderDisablePostJSONRequestBody, reqEditors ...RequestEditorFn) (*DisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse, error)

	// EnableAllTaskRecordersApiV1TasksRecorderEnablePostWithResponse request
	EnableAllTaskRecordersApiV1TasksRecorderEnablePostWithResponse(ctx context.Context, params *EnableAllTaskRecordersApiV1TasksRecorderEnablePostParams, reqEditors ...RequestEditorFn) (*EnableAllTaskRecordersApiV1TasksRecorderEnablePostResponse, error)

	// StartAllTasksApiV1TasksStartPostWithResponse request
	StartAllTasksApiV1TasksStartPostWithResponse(ctx context.Context, params *StartAllTasksApiV1TasksStartPostParams, reqEditors ...RequestEditorFn) (*StartAllTasksApiV1TasksStartPostResponse, error)

	// StopAllTasksApiV1TasksStopPostWithBodyWithResponse request with any body
	StopAllTasksApiV1TasksStopPostWithBodyWithResponse(ctx context.Context, params *StopAllTasksApiV1TasksStopPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StopAllTasksApiV1TasksStopPostResponse, error)

	StopAllTasksApiV1TasksStopPostWithResponse(ctx context.Context, params *StopAllTasksApiV1TasksStopPostParams, body StopAllTasksApiV1TasksStopPostJSONRequestBody, reqEditors ...RequestEditorFn) (*StopAllTasksApiV1TasksStopPostResponse, error)

	// RemoveTaskApiV1TasksRoomIdDeleteWithResponse request
	RemoveTaskApiV1TasksRoomIdDeleteWithResponse(ctx context.Context, roomId int, params *RemoveTaskApiV1TasksRoomIdDeleteParams, reqEditors ...RequestEditorFn) (*RemoveTaskApiV1TasksRoomIdDeleteResponse, error)

	// AddTaskApiV1TasksRoomIdPostWithResponse request
	AddTaskApiV1TasksRoomIdPostWithResponse(ctx context.Context, roomId int, params *AddTaskApiV1TasksRoomIdPostParams, reqEditors ...RequestEditorFn) (*AddTaskApiV1TasksRoomIdPostResponse, error)

	// CanCutStreamApiV1TasksRoomIdCutGetWithResponse request
	CanCutStreamApiV1TasksRoomIdCutGetWithResponse(ctx context.Context, roomId int, params *CanCutStreamApiV1TasksRoomIdCutGetParams, reqEditors ...RequestEditorFn) (*CanCutStreamApiV1TasksRoomIdCutGetResponse, error)

	// CutStreamApiV1TasksRoomIdCutPostWithResponse request
	CutStreamApiV1TasksRoomIdCutPostWithResponse(ctx context.Context, roomId int, params *CutStreamApiV1TasksRoomIdCutPostParams, reqEditors ...RequestEditorFn) (*CutStreamApiV1TasksRoomIdCutPostResponse, error)

	// GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetWithResponse request
	GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetWithResponse(ctx context.Context, roomId int, params *GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetParams, reqEditors ...RequestEditorFn) (*GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetResponse, error)

	// GetOneTaskDataApiV1TasksRoomIdDataGetWithResponse request
	GetOneTaskDataApiV1TasksRoomIdDataGetWithResponse(ctx context.Context, roomId int, params *GetOneTaskDataApiV1TasksRoomIdDataGetParams, reqEditors ...RequestEditorFn) (*GetOneTaskDataApiV1TasksRoomIdDataGetResponse, error)

	// UpdateTaskInfoApiV1TasksRoomIdInfoPostWithResponse request
	UpdateTaskInfoApiV1TasksRoomIdInfoPostWithResponse(ctx context.Context, roomId int, params *UpdateTaskInfoApiV1TasksRoomIdInfoPostParams, reqEditors ...RequestEditorFn) (*UpdateTaskInfoApiV1TasksRoomIdInfoPostResponse, error)

	// GetTaskMetadataApiV1TasksRoomIdMetadataGetWithResponse request
	GetTaskMetadataApiV1TasksRoomIdMetadataGetWithResponse(ctx context.Context, roomId int, params *GetTaskMetadataApiV1TasksRoomIdMetadataGetParams, reqEditors ...RequestEditorFn) (*GetTaskMetadataApiV1TasksRoomIdMetadataGetResponse, error)

	// GetTaskParamApiV1TasksRoomIdParamGetWithResponse request
	GetTaskParamApiV1TasksRoomIdParamGetWithResponse(ctx context.Context, roomId int, params *GetTaskParamApiV1TasksRoomIdParamGetParams, reqEditors ...RequestEditorFn) (*GetTaskParamApiV1TasksRoomIdParamGetResponse, error)

	// GetTaskStreamProfileApiV1TasksRoomIdProfileGetWithResponse request
	GetTaskStreamProfileApiV1TasksRoomIdProfileGetWithResponse(ctx context.Context, roomId int, params *GetTaskStreamProfileApiV1TasksRoomIdProfileGetParams, reqEditors ...RequestEditorFn) (*GetTaskStreamProfileApiV1TasksRoomIdProfileGetResponse, error)

	// DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostWithBodyWithResponse request with any body
	DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostWithBodyWithResponse(ctx context.Context, roomId int, params *DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse, error)

	DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostWithResponse(ctx context.Context, roomId int, params *DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams, body DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostJSONRequestBody, reqEditors ...RequestEditorFn) (*DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse, error)

	// EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostWithResponse request
	EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostWithResponse(ctx context.Context, roomId int, params *EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostParams, reqEditors ...RequestEditorFn) (*EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostResponse, error)

	// StartTaskApiV1TasksRoomIdStartPostWithResponse request
	StartTaskApiV1TasksRoomIdStartPostWithResponse(ctx context.Context, roomId int, params *StartTaskApiV1TasksRoomIdStartPostParams, reqEditors ...RequestEditorFn) (*StartTaskApiV1TasksRoomIdStartPostResponse, error)

	// StopTaskApiV1TasksRoomIdStopPostWithBodyWithResponse request with any body
	StopTaskApiV1TasksRoomIdStopPostWithBodyWithResponse(ctx context.Context, roomId int, params *StopTaskApiV1TasksRoomIdStopPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StopTaskApiV1TasksRoomIdStopPostResponse, error)

	StopTaskApiV1TasksRoomIdStopPostWithResponse(ctx context.Context, roomId int, params *StopTaskApiV1TasksRoomIdStopPostParams, body StopTaskApiV1TasksRoomIdStopPostJSONRequestBody, reqEditors ...RequestEditorFn) (*StopTaskApiV1TasksRoomIdStopPostResponse, error)

	// GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetWithResponse request
	GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetWithResponse(ctx context.Context, roomId int, params *GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetParams, reqEditors ...RequestEditorFn) (*GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetResponse, error)

	// GetLatestVersionApiV1UpdateVersionLatestGetWithResponse request
	GetLatestVersionApiV1UpdateVersionLatestGetWithResponse(ctx context.Context, params *GetLatestVersionApiV1UpdateVersionLatestGetParams, reqEditors ...RequestEditorFn) (*GetLatestVersionApiV1UpdateVersionLatestGetResponse, error)

	// ValidateCookieApiV1ValidationCookiePostWithBodyWithResponse request with any body
	ValidateCookieApiV1ValidationCookiePostWithBodyWithResponse(ctx context.Context, params *ValidateCookieApiV1ValidationCookiePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateCookieApiV1ValidationCookiePostResponse, error)

	ValidateCookieApiV1ValidationCookiePostWithResponse(ctx context.Context, params *ValidateCookieApiV1ValidationCookiePostParams, body ValidateCookieApiV1ValidationCookiePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateCookieApiV1ValidationCookiePostResponse, error)

	// ValidateDirApiV1ValidationDirPostWithBodyWithResponse request with any body
	ValidateDirApiV1ValidationDirPostWithBodyWithResponse(ctx context.Context, params *ValidateDirApiV1ValidationDirPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateDirApiV1ValidationDirPostResponse, error)

	ValidateDirApiV1ValidationDirPostWithResponse(ctx context.Context, params *ValidateDirApiV1ValidationDirPostParams, body ValidateDirApiV1ValidationDirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateDirApiV1ValidationDirPostResponse, error)
}

type ExitAppApiV1AppExitPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ExitAppApiV1AppExitPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExitAppApiV1AppExitPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppInfoApiV1AppInfoGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetAppInfoApiV1AppInfoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppInfoApiV1AppInfoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartAppApiV1AppRestartPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RestartAppApiV1AppRestartPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartAppApiV1AppRestartPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppStatusApiV1AppStatusGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetAppStatusApiV1AppStatusGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppStatusApiV1AppStatusGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsApiV1SettingsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsOut
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetSettingsApiV1SettingsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsApiV1SettingsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeSettingsApiV1SettingsPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsOut
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ChangeSettingsApiV1SettingsPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeSettingsApiV1SettingsPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskOptionsApiV1SettingsTasksRoomIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskOptions
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTaskOptionsApiV1SettingsTasksRoomIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskOptionsApiV1SettingsTasksRoomIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskOptions
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveAllTasksApiV1TasksDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RemoveAllTasksApiV1TasksDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveAllTasksApiV1TasksDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskDataApiV1TasksDataGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTaskDataApiV1TasksDataGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskDataApiV1TasksDataGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAllTaskInfosApiV1TasksInfoPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateAllTaskInfosApiV1TasksInfoPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAllTaskInfosApiV1TasksInfoPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableAllTaskRecordersApiV1TasksRecorderEnablePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r EnableAllTaskRecordersApiV1TasksRecorderEnablePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableAllTaskRecordersApiV1TasksRecorderEnablePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartAllTasksApiV1TasksStartPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r StartAllTasksApiV1TasksStartPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartAllTasksApiV1TasksStartPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopAllTasksApiV1TasksStopPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r StopAllTasksApiV1TasksStopPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopAllTasksApiV1TasksStopPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveTaskApiV1TasksRoomIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RemoveTaskApiV1TasksRoomIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveTaskApiV1TasksRoomIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTaskApiV1TasksRoomIdPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ResponseMessage
	JSON403      *ResponseMessage
	JSON409      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddTaskApiV1TasksRoomIdPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTaskApiV1TasksRoomIdPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CanCutStreamApiV1TasksRoomIdCutGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CanCutStreamApiV1TasksRoomIdCutGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CanCutStreamApiV1TasksRoomIdCutGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CutStreamApiV1TasksRoomIdCutPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ResponseMessage
	JSON403      *ResponseMessage
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CutStreamApiV1TasksRoomIdCutPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CutStreamApiV1TasksRoomIdCutPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOneTaskDataApiV1TasksRoomIdDataGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetOneTaskDataApiV1TasksRoomIdDataGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOneTaskDataApiV1TasksRoomIdDataGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTaskInfoApiV1TasksRoomIdInfoPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateTaskInfoApiV1TasksRoomIdInfoPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTaskInfoApiV1TasksRoomIdInfoPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskMetadataApiV1TasksRoomIdMetadataGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTaskMetadataApiV1TasksRoomIdMetadataGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskMetadataApiV1TasksRoomIdMetadataGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskParamApiV1TasksRoomIdParamGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTaskParamApiV1TasksRoomIdParamGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskParamApiV1TasksRoomIdParamGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskStreamProfileApiV1TasksRoomIdProfileGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTaskStreamProfileApiV1TasksRoomIdProfileGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskStreamProfileApiV1TasksRoomIdProfileGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ResponseMessage
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartTaskApiV1TasksRoomIdStartPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r StartTaskApiV1TasksRoomIdStartPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartTaskApiV1TasksRoomIdStartPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopTaskApiV1TasksRoomIdStopPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ResponseMessage
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r StopTaskApiV1TasksRoomIdStopPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopTaskApiV1TasksRoomIdStopPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON404      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestVersionApiV1UpdateVersionLatestGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetLatestVersionApiV1UpdateVersionLatestGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestVersionApiV1UpdateVersionLatestGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateCookieApiV1ValidationCookiePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ValidateCookieApiV1ValidationCookiePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateCookieApiV1ValidationCookiePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateDirApiV1ValidationDirPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMessage
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ValidateDirApiV1ValidationDirPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateDirApiV1ValidationDirPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ExitAppApiV1AppExitPostWithResponse request returning *ExitAppApiV1AppExitPostResponse
func (c *ClientWithResponses) ExitAppApiV1AppExitPostWithResponse(ctx context.Context, params *ExitAppApiV1AppExitPostParams, reqEditors ...RequestEditorFn) (*ExitAppApiV1AppExitPostResponse, error) {
	rsp, err := c.ExitAppApiV1AppExitPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExitAppApiV1AppExitPostResponse(rsp)
}

// GetAppInfoApiV1AppInfoGetWithResponse request returning *GetAppInfoApiV1AppInfoGetResponse
func (c *ClientWithResponses) GetAppInfoApiV1AppInfoGetWithResponse(ctx context.Context, params *GetAppInfoApiV1AppInfoGetParams, reqEditors ...RequestEditorFn) (*GetAppInfoApiV1AppInfoGetResponse, error) {
	rsp, err := c.GetAppInfoApiV1AppInfoGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppInfoApiV1AppInfoGetResponse(rsp)
}

// RestartAppApiV1AppRestartPostWithResponse request returning *RestartAppApiV1AppRestartPostResponse
func (c *ClientWithResponses) RestartAppApiV1AppRestartPostWithResponse(ctx context.Context, params *RestartAppApiV1AppRestartPostParams, reqEditors ...RequestEditorFn) (*RestartAppApiV1AppRestartPostResponse, error) {
	rsp, err := c.RestartAppApiV1AppRestartPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartAppApiV1AppRestartPostResponse(rsp)
}

// GetAppStatusApiV1AppStatusGetWithResponse request returning *GetAppStatusApiV1AppStatusGetResponse
func (c *ClientWithResponses) GetAppStatusApiV1AppStatusGetWithResponse(ctx context.Context, params *GetAppStatusApiV1AppStatusGetParams, reqEditors ...RequestEditorFn) (*GetAppStatusApiV1AppStatusGetResponse, error) {
	rsp, err := c.GetAppStatusApiV1AppStatusGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppStatusApiV1AppStatusGetResponse(rsp)
}

// GetSettingsApiV1SettingsGetWithResponse request returning *GetSettingsApiV1SettingsGetResponse
func (c *ClientWithResponses) GetSettingsApiV1SettingsGetWithResponse(ctx context.Context, params *GetSettingsApiV1SettingsGetParams, reqEditors ...RequestEditorFn) (*GetSettingsApiV1SettingsGetResponse, error) {
	rsp, err := c.GetSettingsApiV1SettingsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsApiV1SettingsGetResponse(rsp)
}

// ChangeSettingsApiV1SettingsPatchWithBodyWithResponse request with arbitrary body returning *ChangeSettingsApiV1SettingsPatchResponse
func (c *ClientWithResponses) ChangeSettingsApiV1SettingsPatchWithBodyWithResponse(ctx context.Context, params *ChangeSettingsApiV1SettingsPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeSettingsApiV1SettingsPatchResponse, error) {
	rsp, err := c.ChangeSettingsApiV1SettingsPatchWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeSettingsApiV1SettingsPatchResponse(rsp)
}

func (c *ClientWithResponses) ChangeSettingsApiV1SettingsPatchWithResponse(ctx context.Context, params *ChangeSettingsApiV1SettingsPatchParams, body ChangeSettingsApiV1SettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeSettingsApiV1SettingsPatchResponse, error) {
	rsp, err := c.ChangeSettingsApiV1SettingsPatch(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeSettingsApiV1SettingsPatchResponse(rsp)
}

// GetTaskOptionsApiV1SettingsTasksRoomIdGetWithResponse request returning *GetTaskOptionsApiV1SettingsTasksRoomIdGetResponse
func (c *ClientWithResponses) GetTaskOptionsApiV1SettingsTasksRoomIdGetWithResponse(ctx context.Context, roomId int, params *GetTaskOptionsApiV1SettingsTasksRoomIdGetParams, reqEditors ...RequestEditorFn) (*GetTaskOptionsApiV1SettingsTasksRoomIdGetResponse, error) {
	rsp, err := c.GetTaskOptionsApiV1SettingsTasksRoomIdGet(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskOptionsApiV1SettingsTasksRoomIdGetResponse(rsp)
}

// ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchWithBodyWithResponse request with arbitrary body returning *ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse
func (c *ClientWithResponses) ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchWithBodyWithResponse(ctx context.Context, roomId int, params *ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse, error) {
	rsp, err := c.ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchWithBody(ctx, roomId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse(rsp)
}

func (c *ClientWithResponses) ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchWithResponse(ctx context.Context, roomId int, params *ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchParams, body ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse, error) {
	rsp, err := c.ChangeTaskOptionsApiV1SettingsTasksRoomIdPatch(ctx, roomId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse(rsp)
}

// RemoveAllTasksApiV1TasksDeleteWithResponse request returning *RemoveAllTasksApiV1TasksDeleteResponse
func (c *ClientWithResponses) RemoveAllTasksApiV1TasksDeleteWithResponse(ctx context.Context, params *RemoveAllTasksApiV1TasksDeleteParams, reqEditors ...RequestEditorFn) (*RemoveAllTasksApiV1TasksDeleteResponse, error) {
	rsp, err := c.RemoveAllTasksApiV1TasksDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAllTasksApiV1TasksDeleteResponse(rsp)
}

// GetTaskDataApiV1TasksDataGetWithResponse request returning *GetTaskDataApiV1TasksDataGetResponse
func (c *ClientWithResponses) GetTaskDataApiV1TasksDataGetWithResponse(ctx context.Context, params *GetTaskDataApiV1TasksDataGetParams, reqEditors ...RequestEditorFn) (*GetTaskDataApiV1TasksDataGetResponse, error) {
	rsp, err := c.GetTaskDataApiV1TasksDataGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskDataApiV1TasksDataGetResponse(rsp)
}

// UpdateAllTaskInfosApiV1TasksInfoPostWithResponse request returning *UpdateAllTaskInfosApiV1TasksInfoPostResponse
func (c *ClientWithResponses) UpdateAllTaskInfosApiV1TasksInfoPostWithResponse(ctx context.Context, params *UpdateAllTaskInfosApiV1TasksInfoPostParams, reqEditors ...RequestEditorFn) (*UpdateAllTaskInfosApiV1TasksInfoPostResponse, error) {
	rsp, err := c.UpdateAllTaskInfosApiV1TasksInfoPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAllTaskInfosApiV1TasksInfoPostResponse(rsp)
}

// DisableAllTaskRecordersApiV1TasksRecorderDisablePostWithBodyWithResponse request with arbitrary body returning *DisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse
func (c *ClientWithResponses) DisableAllTaskRecordersApiV1TasksRecorderDisablePostWithBodyWithResponse(ctx context.Context, params *DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse, error) {
	rsp, err := c.DisableAllTaskRecordersApiV1TasksRecorderDisablePostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse(rsp)
}

func (c *ClientWithResponses) DisableAllTaskRecordersApiV1TasksRecorderDisablePostWithResponse(ctx context.Context, params *DisableAllTaskRecordersApiV1TasksRecorderDisablePostParams, body DisableAllTaskRecordersApiV1TasksRecorderDisablePostJSONRequestBody, reqEditors ...RequestEditorFn) (*DisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse, error) {
	rsp, err := c.DisableAllTaskRecordersApiV1TasksRecorderDisablePost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse(rsp)
}

// EnableAllTaskRecordersApiV1TasksRecorderEnablePostWithResponse request returning *EnableAllTaskRecordersApiV1TasksRecorderEnablePostResponse
func (c *ClientWithResponses) EnableAllTaskRecordersApiV1TasksRecorderEnablePostWithResponse(ctx context.Context, params *EnableAllTaskRecordersApiV1TasksRecorderEnablePostParams, reqEditors ...RequestEditorFn) (*EnableAllTaskRecordersApiV1TasksRecorderEnablePostResponse, error) {
	rsp, err := c.EnableAllTaskRecordersApiV1TasksRecorderEnablePost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableAllTaskRecordersApiV1TasksRecorderEnablePostResponse(rsp)
}

// StartAllTasksApiV1TasksStartPostWithResponse request returning *StartAllTasksApiV1TasksStartPostResponse
func (c *ClientWithResponses) StartAllTasksApiV1TasksStartPostWithResponse(ctx context.Context, params *StartAllTasksApiV1TasksStartPostParams, reqEditors ...RequestEditorFn) (*StartAllTasksApiV1TasksStartPostResponse, error) {
	rsp, err := c.StartAllTasksApiV1TasksStartPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartAllTasksApiV1TasksStartPostResponse(rsp)
}

// StopAllTasksApiV1TasksStopPostWithBodyWithResponse request with arbitrary body returning *StopAllTasksApiV1TasksStopPostResponse
func (c *ClientWithResponses) StopAllTasksApiV1TasksStopPostWithBodyWithResponse(ctx context.Context, params *StopAllTasksApiV1TasksStopPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StopAllTasksApiV1TasksStopPostResponse, error) {
	rsp, err := c.StopAllTasksApiV1TasksStopPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopAllTasksApiV1TasksStopPostResponse(rsp)
}

func (c *ClientWithResponses) StopAllTasksApiV1TasksStopPostWithResponse(ctx context.Context, params *StopAllTasksApiV1TasksStopPostParams, body StopAllTasksApiV1TasksStopPostJSONRequestBody, reqEditors ...RequestEditorFn) (*StopAllTasksApiV1TasksStopPostResponse, error) {
	rsp, err := c.StopAllTasksApiV1TasksStopPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopAllTasksApiV1TasksStopPostResponse(rsp)
}

// RemoveTaskApiV1TasksRoomIdDeleteWithResponse request returning *RemoveTaskApiV1TasksRoomIdDeleteResponse
func (c *ClientWithResponses) RemoveTaskApiV1TasksRoomIdDeleteWithResponse(ctx context.Context, roomId int, params *RemoveTaskApiV1TasksRoomIdDeleteParams, reqEditors ...RequestEditorFn) (*RemoveTaskApiV1TasksRoomIdDeleteResponse, error) {
	rsp, err := c.RemoveTaskApiV1TasksRoomIdDelete(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveTaskApiV1TasksRoomIdDeleteResponse(rsp)
}

// AddTaskApiV1TasksRoomIdPostWithResponse request returning *AddTaskApiV1TasksRoomIdPostResponse
func (c *ClientWithResponses) AddTaskApiV1TasksRoomIdPostWithResponse(ctx context.Context, roomId int, params *AddTaskApiV1TasksRoomIdPostParams, reqEditors ...RequestEditorFn) (*AddTaskApiV1TasksRoomIdPostResponse, error) {
	rsp, err := c.AddTaskApiV1TasksRoomIdPost(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTaskApiV1TasksRoomIdPostResponse(rsp)
}

// CanCutStreamApiV1TasksRoomIdCutGetWithResponse request returning *CanCutStreamApiV1TasksRoomIdCutGetResponse
func (c *ClientWithResponses) CanCutStreamApiV1TasksRoomIdCutGetWithResponse(ctx context.Context, roomId int, params *CanCutStreamApiV1TasksRoomIdCutGetParams, reqEditors ...RequestEditorFn) (*CanCutStreamApiV1TasksRoomIdCutGetResponse, error) {
	rsp, err := c.CanCutStreamApiV1TasksRoomIdCutGet(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCanCutStreamApiV1TasksRoomIdCutGetResponse(rsp)
}

// CutStreamApiV1TasksRoomIdCutPostWithResponse request returning *CutStreamApiV1TasksRoomIdCutPostResponse
func (c *ClientWithResponses) CutStreamApiV1TasksRoomIdCutPostWithResponse(ctx context.Context, roomId int, params *CutStreamApiV1TasksRoomIdCutPostParams, reqEditors ...RequestEditorFn) (*CutStreamApiV1TasksRoomIdCutPostResponse, error) {
	rsp, err := c.CutStreamApiV1TasksRoomIdCutPost(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCutStreamApiV1TasksRoomIdCutPostResponse(rsp)
}

// GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetWithResponse request returning *GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetResponse
func (c *ClientWithResponses) GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetWithResponse(ctx context.Context, roomId int, params *GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetParams, reqEditors ...RequestEditorFn) (*GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetResponse, error) {
	rsp, err := c.GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGet(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetResponse(rsp)
}

// GetOneTaskDataApiV1TasksRoomIdDataGetWithResponse request returning *GetOneTaskDataApiV1TasksRoomIdDataGetResponse
func (c *ClientWithResponses) GetOneTaskDataApiV1TasksRoomIdDataGetWithResponse(ctx context.Context, roomId int, params *GetOneTaskDataApiV1TasksRoomIdDataGetParams, reqEditors ...RequestEditorFn) (*GetOneTaskDataApiV1TasksRoomIdDataGetResponse, error) {
	rsp, err := c.GetOneTaskDataApiV1TasksRoomIdDataGet(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOneTaskDataApiV1TasksRoomIdDataGetResponse(rsp)
}

// UpdateTaskInfoApiV1TasksRoomIdInfoPostWithResponse request returning *UpdateTaskInfoApiV1TasksRoomIdInfoPostResponse
func (c *ClientWithResponses) UpdateTaskInfoApiV1TasksRoomIdInfoPostWithResponse(ctx context.Context, roomId int, params *UpdateTaskInfoApiV1TasksRoomIdInfoPostParams, reqEditors ...RequestEditorFn) (*UpdateTaskInfoApiV1TasksRoomIdInfoPostResponse, error) {
	rsp, err := c.UpdateTaskInfoApiV1TasksRoomIdInfoPost(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTaskInfoApiV1TasksRoomIdInfoPostResponse(rsp)
}

// GetTaskMetadataApiV1TasksRoomIdMetadataGetWithResponse request returning *GetTaskMetadataApiV1TasksRoomIdMetadataGetResponse
func (c *ClientWithResponses) GetTaskMetadataApiV1TasksRoomIdMetadataGetWithResponse(ctx context.Context, roomId int, params *GetTaskMetadataApiV1TasksRoomIdMetadataGetParams, reqEditors ...RequestEditorFn) (*GetTaskMetadataApiV1TasksRoomIdMetadataGetResponse, error) {
	rsp, err := c.GetTaskMetadataApiV1TasksRoomIdMetadataGet(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskMetadataApiV1TasksRoomIdMetadataGetResponse(rsp)
}

// GetTaskParamApiV1TasksRoomIdParamGetWithResponse request returning *GetTaskParamApiV1TasksRoomIdParamGetResponse
func (c *ClientWithResponses) GetTaskParamApiV1TasksRoomIdParamGetWithResponse(ctx context.Context, roomId int, params *GetTaskParamApiV1TasksRoomIdParamGetParams, reqEditors ...RequestEditorFn) (*GetTaskParamApiV1TasksRoomIdParamGetResponse, error) {
	rsp, err := c.GetTaskParamApiV1TasksRoomIdParamGet(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskParamApiV1TasksRoomIdParamGetResponse(rsp)
}

// GetTaskStreamProfileApiV1TasksRoomIdProfileGetWithResponse request returning *GetTaskStreamProfileApiV1TasksRoomIdProfileGetResponse
func (c *ClientWithResponses) GetTaskStreamProfileApiV1TasksRoomIdProfileGetWithResponse(ctx context.Context, roomId int, params *GetTaskStreamProfileApiV1TasksRoomIdProfileGetParams, reqEditors ...RequestEditorFn) (*GetTaskStreamProfileApiV1TasksRoomIdProfileGetResponse, error) {
	rsp, err := c.GetTaskStreamProfileApiV1TasksRoomIdProfileGet(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskStreamProfileApiV1TasksRoomIdProfileGetResponse(rsp)
}

// DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostWithBodyWithResponse request with arbitrary body returning *DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse
func (c *ClientWithResponses) DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostWithBodyWithResponse(ctx context.Context, roomId int, params *DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse, error) {
	rsp, err := c.DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostWithBody(ctx, roomId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse(rsp)
}

func (c *ClientWithResponses) DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostWithResponse(ctx context.Context, roomId int, params *DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostParams, body DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostJSONRequestBody, reqEditors ...RequestEditorFn) (*DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse, error) {
	rsp, err := c.DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePost(ctx, roomId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse(rsp)
}

// EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostWithResponse request returning *EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostResponse
func (c *ClientWithResponses) EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostWithResponse(ctx context.Context, roomId int, params *EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostParams, reqEditors ...RequestEditorFn) (*EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostResponse, error) {
	rsp, err := c.EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePost(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostResponse(rsp)
}

// StartTaskApiV1TasksRoomIdStartPostWithResponse request returning *StartTaskApiV1TasksRoomIdStartPostResponse
func (c *ClientWithResponses) StartTaskApiV1TasksRoomIdStartPostWithResponse(ctx context.Context, roomId int, params *StartTaskApiV1TasksRoomIdStartPostParams, reqEditors ...RequestEditorFn) (*StartTaskApiV1TasksRoomIdStartPostResponse, error) {
	rsp, err := c.StartTaskApiV1TasksRoomIdStartPost(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartTaskApiV1TasksRoomIdStartPostResponse(rsp)
}

// StopTaskApiV1TasksRoomIdStopPostWithBodyWithResponse request with arbitrary body returning *StopTaskApiV1TasksRoomIdStopPostResponse
func (c *ClientWithResponses) StopTaskApiV1TasksRoomIdStopPostWithBodyWithResponse(ctx context.Context, roomId int, params *StopTaskApiV1TasksRoomIdStopPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StopTaskApiV1TasksRoomIdStopPostResponse, error) {
	rsp, err := c.StopTaskApiV1TasksRoomIdStopPostWithBody(ctx, roomId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopTaskApiV1TasksRoomIdStopPostResponse(rsp)
}

func (c *ClientWithResponses) StopTaskApiV1TasksRoomIdStopPostWithResponse(ctx context.Context, roomId int, params *StopTaskApiV1TasksRoomIdStopPostParams, body StopTaskApiV1TasksRoomIdStopPostJSONRequestBody, reqEditors ...RequestEditorFn) (*StopTaskApiV1TasksRoomIdStopPostResponse, error) {
	rsp, err := c.StopTaskApiV1TasksRoomIdStopPost(ctx, roomId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopTaskApiV1TasksRoomIdStopPostResponse(rsp)
}

// GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetWithResponse request returning *GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetResponse
func (c *ClientWithResponses) GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetWithResponse(ctx context.Context, roomId int, params *GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetParams, reqEditors ...RequestEditorFn) (*GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetResponse, error) {
	rsp, err := c.GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGet(ctx, roomId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetResponse(rsp)
}

// GetLatestVersionApiV1UpdateVersionLatestGetWithResponse request returning *GetLatestVersionApiV1UpdateVersionLatestGetResponse
func (c *ClientWithResponses) GetLatestVersionApiV1UpdateVersionLatestGetWithResponse(ctx context.Context, params *GetLatestVersionApiV1UpdateVersionLatestGetParams, reqEditors ...RequestEditorFn) (*GetLatestVersionApiV1UpdateVersionLatestGetResponse, error) {
	rsp, err := c.GetLatestVersionApiV1UpdateVersionLatestGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestVersionApiV1UpdateVersionLatestGetResponse(rsp)
}

// ValidateCookieApiV1ValidationCookiePostWithBodyWithResponse request with arbitrary body returning *ValidateCookieApiV1ValidationCookiePostResponse
func (c *ClientWithResponses) ValidateCookieApiV1ValidationCookiePostWithBodyWithResponse(ctx context.Context, params *ValidateCookieApiV1ValidationCookiePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateCookieApiV1ValidationCookiePostResponse, error) {
	rsp, err := c.ValidateCookieApiV1ValidationCookiePostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateCookieApiV1ValidationCookiePostResponse(rsp)
}

func (c *ClientWithResponses) ValidateCookieApiV1ValidationCookiePostWithResponse(ctx context.Context, params *ValidateCookieApiV1ValidationCookiePostParams, body ValidateCookieApiV1ValidationCookiePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateCookieApiV1ValidationCookiePostResponse, error) {
	rsp, err := c.ValidateCookieApiV1ValidationCookiePost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateCookieApiV1ValidationCookiePostResponse(rsp)
}

// ValidateDirApiV1ValidationDirPostWithBodyWithResponse request with arbitrary body returning *ValidateDirApiV1ValidationDirPostResponse
func (c *ClientWithResponses) ValidateDirApiV1ValidationDirPostWithBodyWithResponse(ctx context.Context, params *ValidateDirApiV1ValidationDirPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateDirApiV1ValidationDirPostResponse, error) {
	rsp, err := c.ValidateDirApiV1ValidationDirPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateDirApiV1ValidationDirPostResponse(rsp)
}

func (c *ClientWithResponses) ValidateDirApiV1ValidationDirPostWithResponse(ctx context.Context, params *ValidateDirApiV1ValidationDirPostParams, body ValidateDirApiV1ValidationDirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateDirApiV1ValidationDirPostResponse, error) {
	rsp, err := c.ValidateDirApiV1ValidationDirPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateDirApiV1ValidationDirPostResponse(rsp)
}

// ParseExitAppApiV1AppExitPostResponse parses an HTTP response from a ExitAppApiV1AppExitPostWithResponse call
func ParseExitAppApiV1AppExitPostResponse(rsp *http.Response) (*ExitAppApiV1AppExitPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExitAppApiV1AppExitPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetAppInfoApiV1AppInfoGetResponse parses an HTTP response from a GetAppInfoApiV1AppInfoGetWithResponse call
func ParseGetAppInfoApiV1AppInfoGetResponse(rsp *http.Response) (*GetAppInfoApiV1AppInfoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppInfoApiV1AppInfoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRestartAppApiV1AppRestartPostResponse parses an HTTP response from a RestartAppApiV1AppRestartPostWithResponse call
func ParseRestartAppApiV1AppRestartPostResponse(rsp *http.Response) (*RestartAppApiV1AppRestartPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestartAppApiV1AppRestartPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetAppStatusApiV1AppStatusGetResponse parses an HTTP response from a GetAppStatusApiV1AppStatusGetWithResponse call
func ParseGetAppStatusApiV1AppStatusGetResponse(rsp *http.Response) (*GetAppStatusApiV1AppStatusGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppStatusApiV1AppStatusGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSettingsApiV1SettingsGetResponse parses an HTTP response from a GetSettingsApiV1SettingsGetWithResponse call
func ParseGetSettingsApiV1SettingsGetResponse(rsp *http.Response) (*GetSettingsApiV1SettingsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsApiV1SettingsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseChangeSettingsApiV1SettingsPatchResponse parses an HTTP response from a ChangeSettingsApiV1SettingsPatchWithResponse call
func ParseChangeSettingsApiV1SettingsPatchResponse(rsp *http.Response) (*ChangeSettingsApiV1SettingsPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeSettingsApiV1SettingsPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTaskOptionsApiV1SettingsTasksRoomIdGetResponse parses an HTTP response from a GetTaskOptionsApiV1SettingsTasksRoomIdGetWithResponse call
func ParseGetTaskOptionsApiV1SettingsTasksRoomIdGetResponse(rsp *http.Response) (*GetTaskOptionsApiV1SettingsTasksRoomIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskOptionsApiV1SettingsTasksRoomIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse parses an HTTP response from a ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchWithResponse call
func ParseChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse(rsp *http.Response) (*ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeTaskOptionsApiV1SettingsTasksRoomIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRemoveAllTasksApiV1TasksDeleteResponse parses an HTTP response from a RemoveAllTasksApiV1TasksDeleteWithResponse call
func ParseRemoveAllTasksApiV1TasksDeleteResponse(rsp *http.Response) (*RemoveAllTasksApiV1TasksDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveAllTasksApiV1TasksDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTaskDataApiV1TasksDataGetResponse parses an HTTP response from a GetTaskDataApiV1TasksDataGetWithResponse call
func ParseGetTaskDataApiV1TasksDataGetResponse(rsp *http.Response) (*GetTaskDataApiV1TasksDataGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskDataApiV1TasksDataGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateAllTaskInfosApiV1TasksInfoPostResponse parses an HTTP response from a UpdateAllTaskInfosApiV1TasksInfoPostWithResponse call
func ParseUpdateAllTaskInfosApiV1TasksInfoPostResponse(rsp *http.Response) (*UpdateAllTaskInfosApiV1TasksInfoPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAllTaskInfosApiV1TasksInfoPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse parses an HTTP response from a DisableAllTaskRecordersApiV1TasksRecorderDisablePostWithResponse call
func ParseDisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse(rsp *http.Response) (*DisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisableAllTaskRecordersApiV1TasksRecorderDisablePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseEnableAllTaskRecordersApiV1TasksRecorderEnablePostResponse parses an HTTP response from a EnableAllTaskRecordersApiV1TasksRecorderEnablePostWithResponse call
func ParseEnableAllTaskRecordersApiV1TasksRecorderEnablePostResponse(rsp *http.Response) (*EnableAllTaskRecordersApiV1TasksRecorderEnablePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableAllTaskRecordersApiV1TasksRecorderEnablePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseStartAllTasksApiV1TasksStartPostResponse parses an HTTP response from a StartAllTasksApiV1TasksStartPostWithResponse call
func ParseStartAllTasksApiV1TasksStartPostResponse(rsp *http.Response) (*StartAllTasksApiV1TasksStartPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartAllTasksApiV1TasksStartPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseStopAllTasksApiV1TasksStopPostResponse parses an HTTP response from a StopAllTasksApiV1TasksStopPostWithResponse call
func ParseStopAllTasksApiV1TasksStopPostResponse(rsp *http.Response) (*StopAllTasksApiV1TasksStopPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopAllTasksApiV1TasksStopPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRemoveTaskApiV1TasksRoomIdDeleteResponse parses an HTTP response from a RemoveTaskApiV1TasksRoomIdDeleteWithResponse call
func ParseRemoveTaskApiV1TasksRoomIdDeleteResponse(rsp *http.Response) (*RemoveTaskApiV1TasksRoomIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveTaskApiV1TasksRoomIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddTaskApiV1TasksRoomIdPostResponse parses an HTTP response from a AddTaskApiV1TasksRoomIdPostWithResponse call
func ParseAddTaskApiV1TasksRoomIdPostResponse(rsp *http.Response) (*AddTaskApiV1TasksRoomIdPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTaskApiV1TasksRoomIdPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCanCutStreamApiV1TasksRoomIdCutGetResponse parses an HTTP response from a CanCutStreamApiV1TasksRoomIdCutGetWithResponse call
func ParseCanCutStreamApiV1TasksRoomIdCutGetResponse(rsp *http.Response) (*CanCutStreamApiV1TasksRoomIdCutGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CanCutStreamApiV1TasksRoomIdCutGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCutStreamApiV1TasksRoomIdCutPostResponse parses an HTTP response from a CutStreamApiV1TasksRoomIdCutPostWithResponse call
func ParseCutStreamApiV1TasksRoomIdCutPostResponse(rsp *http.Response) (*CutStreamApiV1TasksRoomIdCutPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CutStreamApiV1TasksRoomIdCutPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetResponse parses an HTTP response from a GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetWithResponse call
func ParseGetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetResponse(rsp *http.Response) (*GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskDanmakuFileDetailsApiV1TasksRoomIdDanmakusGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetOneTaskDataApiV1TasksRoomIdDataGetResponse parses an HTTP response from a GetOneTaskDataApiV1TasksRoomIdDataGetWithResponse call
func ParseGetOneTaskDataApiV1TasksRoomIdDataGetResponse(rsp *http.Response) (*GetOneTaskDataApiV1TasksRoomIdDataGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOneTaskDataApiV1TasksRoomIdDataGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateTaskInfoApiV1TasksRoomIdInfoPostResponse parses an HTTP response from a UpdateTaskInfoApiV1TasksRoomIdInfoPostWithResponse call
func ParseUpdateTaskInfoApiV1TasksRoomIdInfoPostResponse(rsp *http.Response) (*UpdateTaskInfoApiV1TasksRoomIdInfoPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTaskInfoApiV1TasksRoomIdInfoPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTaskMetadataApiV1TasksRoomIdMetadataGetResponse parses an HTTP response from a GetTaskMetadataApiV1TasksRoomIdMetadataGetWithResponse call
func ParseGetTaskMetadataApiV1TasksRoomIdMetadataGetResponse(rsp *http.Response) (*GetTaskMetadataApiV1TasksRoomIdMetadataGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskMetadataApiV1TasksRoomIdMetadataGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTaskParamApiV1TasksRoomIdParamGetResponse parses an HTTP response from a GetTaskParamApiV1TasksRoomIdParamGetWithResponse call
func ParseGetTaskParamApiV1TasksRoomIdParamGetResponse(rsp *http.Response) (*GetTaskParamApiV1TasksRoomIdParamGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskParamApiV1TasksRoomIdParamGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTaskStreamProfileApiV1TasksRoomIdProfileGetResponse parses an HTTP response from a GetTaskStreamProfileApiV1TasksRoomIdProfileGetWithResponse call
func ParseGetTaskStreamProfileApiV1TasksRoomIdProfileGetResponse(rsp *http.Response) (*GetTaskStreamProfileApiV1TasksRoomIdProfileGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskStreamProfileApiV1TasksRoomIdProfileGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse parses an HTTP response from a DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostWithResponse call
func ParseDisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse(rsp *http.Response) (*DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisableTaskRecorderApiV1TasksRoomIdRecorderDisablePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseEnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostResponse parses an HTTP response from a EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostWithResponse call
func ParseEnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostResponse(rsp *http.Response) (*EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableTaskRecorderApiV1TasksRoomIdRecorderEnablePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseStartTaskApiV1TasksRoomIdStartPostResponse parses an HTTP response from a StartTaskApiV1TasksRoomIdStartPostWithResponse call
func ParseStartTaskApiV1TasksRoomIdStartPostResponse(rsp *http.Response) (*StartTaskApiV1TasksRoomIdStartPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartTaskApiV1TasksRoomIdStartPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseStopTaskApiV1TasksRoomIdStopPostResponse parses an HTTP response from a StopTaskApiV1TasksRoomIdStopPostWithResponse call
func ParseStopTaskApiV1TasksRoomIdStopPostResponse(rsp *http.Response) (*StopTaskApiV1TasksRoomIdStopPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopTaskApiV1TasksRoomIdStopPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetResponse parses an HTTP response from a GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetWithResponse call
func ParseGetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetResponse(rsp *http.Response) (*GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskVideoFileDetailsApiV1TasksRoomIdVideosGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetLatestVersionApiV1UpdateVersionLatestGetResponse parses an HTTP response from a GetLatestVersionApiV1UpdateVersionLatestGetWithResponse call
func ParseGetLatestVersionApiV1UpdateVersionLatestGetResponse(rsp *http.Response) (*GetLatestVersionApiV1UpdateVersionLatestGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestVersionApiV1UpdateVersionLatestGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseValidateCookieApiV1ValidationCookiePostResponse parses an HTTP response from a ValidateCookieApiV1ValidationCookiePostWithResponse call
func ParseValidateCookieApiV1ValidationCookiePostResponse(rsp *http.Response) (*ValidateCookieApiV1ValidationCookiePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateCookieApiV1ValidationCookiePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseValidateDirApiV1ValidationDirPostResponse parses an HTTP response from a ValidateDirApiV1ValidationDirPostWithResponse call
func ParseValidateDirApiV1ValidationDirPostResponse(rsp *http.Response) (*ValidateDirApiV1ValidationDirPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateDirApiV1ValidationDirPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
